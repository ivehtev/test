!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";function l(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this}var p="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,N="undefined"==typeof window?{document:p,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window;function S(e,t){var a=[],i=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var s,n,o=e.trim();if(0<=o.indexOf("<")&&0<=o.indexOf(">")){var r="div";for(0===o.indexOf("<li")&&(r="ul"),0===o.indexOf("<tr")&&(r="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(r="tr"),0===o.indexOf("<tbody")&&(r="table"),0===o.indexOf("<option")&&(r="select"),(n=p.createElement(r)).innerHTML=o,i=0;i<n.childNodes.length;i+=1)a.push(n.childNodes[i])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||p).querySelectorAll(e.trim()):[p.getElementById(e.trim().split("#")[1])],i=0;i<s.length;i+=1)s[i]&&a.push(s[i])}else if(e.nodeType||e===N||e===p)a.push(e);else if(0<e.length&&e[0].nodeType)for(i=0;i<e.length;i+=1)a.push(e[i]);return new l(a)}function n(e){for(var t=[],a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a]);return t}S.fn=l.prototype,S.Class=l,S.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.add(t[a]);return this},removeClass:function(e){for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.remove(t[a]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.toggle(t[a]);return this},attr:function(e,t){var a=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i+=1)if(2===a.length)this[i].setAttribute(e,t);else for(var s in e)this[i][s]=e[s],this[i].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var a;if(void 0!==t){for(var i=0;i<this.length;i+=1)(a=this[i]).dom7ElementDataStorage||(a.dom7ElementDataStorage={}),a.dom7ElementDataStorage[e]=t;return this}if(a=this[0]){if(a.dom7ElementDataStorage&&e in a.dom7ElementDataStorage)return a.dom7ElementDataStorage[e];var s=a.getAttribute("data-"+e);return s?s:void 0}},transform:function(e){for(var t=0;t<this.length;t+=1){var a=this[t].style;a.webkitTransform=e,a.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var a=this[t].style;a.webkitTransitionDuration=e,a.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a=e[0],n=e[1],o=e[2],i=e[3];function s(e){var t=e.target;if(t){var a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),S(t).is(n))o.apply(t,a);else for(var i=S(t).parents(),s=0;s<i.length;s+=1)S(i[s]).is(n)&&o.apply(i[s],a)}}function r(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),o.apply(this,t)}"function"==typeof e[1]&&(a=e[0],o=e[1],i=e[2],n=void 0);for(var l,i=i||!1,d=a.split(" "),c=0;c<this.length;c+=1){var p=this[c];if(n)for(l=0;l<d.length;l+=1){var u=d[l];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[u]||(p.dom7LiveListeners[u]=[]),p.dom7LiveListeners[u].push({listener:o,proxyListener:s}),p.addEventListener(u,s,i)}else for(l=0;l<d.length;l+=1){var h=d[l];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[h]||(p.dom7Listeners[h]=[]),p.dom7Listeners[h].push({listener:o,proxyListener:r}),p.addEventListener(h,r,i)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a=e[0],i=e[1],s=e[2],n=e[3];"function"==typeof e[1]&&(a=e[0],s=e[1],n=e[2],i=void 0);for(var n=n||!1,o=a.split(" "),r=0;r<o.length;r+=1)for(var l=o[r],d=0;d<this.length;d+=1){var c=this[d],p=void 0;if(!i&&c.dom7Listeners?p=c.dom7Listeners[l]:i&&c.dom7LiveListeners&&(p=c.dom7LiveListeners[l]),p&&p.length)for(var u=p.length-1;0<=u;--u){var h=p[u];(!s||h.listener!==s)&&!(s&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===s)&&s||(c.removeEventListener(l,h.proxyListener,n),p.splice(u,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=e[0].split(" "),i=e[1],s=0;s<a.length;s+=1)for(var n=a[s],o=0;o<this.length;o+=1){var r=this[o],l=void 0;try{l=new N.CustomEvent(n,{detail:i,bubbles:!0,cancelable:!0})}catch(e){(l=p.createEvent("Event")).initEvent(n,!0,!0),l.detail=i}r.dom7EventData=e.filter(function(e,t){return 0<t}),r.dispatchEvent(l),r.dom7EventData=[],delete r.dom7EventData}return this},transitionEnd:function(t){var a,i=["webkitTransitionEnd","transitionend"],s=this;function n(e){if(e.target===this)for(t.call(this,e),a=0;a<i.length;a+=1)s.off(i[a],n)}if(t)for(a=0;a<i.length;a+=1)s.on(i[a],n);return this},outerWidth:function(e){if(0<this.length){if(e){e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),a=p.body,i=e.clientTop||a.clientTop||0,s=e.clientLeft||a.clientLeft||0,a=e===N?N.scrollY:e.scrollTop,e=e===N?N.scrollX:e.scrollLeft;return{top:t.top+a-i,left:t.left+e-s}}return null},css:function(e,t){var a;if(1===arguments.length){if("string"!=typeof e){for(a=0;a<this.length;a+=1)for(var i in e)this[a].style[i]=e[i];return this}if(this[0])return N.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(a=0;a<this.length;a+=1)this[a].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,a,i=this[0];if(!i||void 0===e)return!1;if("string"==typeof e){if(i.matches)return i.matches(e);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(e);if(i.msMatchesSelector)return i.msMatchesSelector(e);for(t=S(e),a=0;a<t.length;a+=1)if(t[a]===i)return!0;return!1}if(e===p)return i===p;if(e===N)return i===N;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,a=0;a<t.length;a+=1)if(t[a]===i)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;return t-1<e?new l([]):e<0?(t=t+e)<0?new l([]):new l([this[t]]):new l([this[e]])},append:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=0;a<e.length;a+=1)for(var i=e[a],s=0;s<this.length;s+=1)if("string"==typeof i){var n=p.createElement("div");for(n.innerHTML=i;n.firstChild;)this[s].appendChild(n.firstChild)}else if(i instanceof l)for(var o=0;o<i.length;o+=1)this[s].appendChild(i[o]);else this[s].appendChild(i);return this},prepend:function(e){for(var t,a=0;a<this.length;a+=1)if("string"==typeof e){var i=p.createElement("div");for(i.innerHTML=e,t=i.childNodes.length-1;0<=t;--t)this[a].insertBefore(i.childNodes[t],this[a].childNodes[0])}else if(e instanceof l)for(t=0;t<e.length;t+=1)this[a].insertBefore(e[t],this[a].childNodes[0]);else this[a].insertBefore(e,this[a].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&S(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],a=this[0];if(!a)return new l([]);for(;a.nextElementSibling;){var i=a.nextElementSibling;(!e||S(i).is(e))&&t.push(i),a=i}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&S(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],a=this[0];if(!a)return new l([]);for(;a.previousElementSibling;){var i=a.previousElementSibling;(!e||S(i).is(e))&&t.push(i),a=i}return new l(t)},parent:function(e){for(var t=[],a=0;a<this.length;a+=1)null===this[a].parentNode||e&&!S(this[a].parentNode).is(e)||t.push(this[a].parentNode);return S(n(t))},parents:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].parentNode;i;)e&&!S(i).is(e)||t.push(i),i=i.parentNode;return S(n(t))},closest:function(e){var t=this;return void 0===e?new l([]):t.is(e)?t:t.parents(e).eq(0)},find:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].querySelectorAll(e),s=0;s<i.length;s+=1)t.push(i[s]);return new l(t)},children:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].childNodes,s=0;s<i.length;s+=1)e?1===i[s].nodeType&&S(i[s]).is(e)&&t.push(i[s]):1===i[s].nodeType&&t.push(i[s]);return new l(n(t))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=0;a<e.length;a+=1)for(var i=S(e[a]),s=0;s<i.length;s+=1)this[this.length]=i[s],this.length+=1;return this},styles:function(){return this[0]?N.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){S.fn[e]=S.fn[e]||t[e]});function e(e){var t=this;t.params=e=void 0===e?{}:e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var i,G={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var a,i,s;void 0===t&&(t="x");e=N.getComputedStyle(e,null);return N.WebKitCSSMatrix?(6<(i=e.transform||e.webkitTransform).split(",").length&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new N.WebKitCSSMatrix("none"===i?"":i)):a=(s=e.MozTransform||e.OTransform||e.MsTransform||e.msTransform||e.transform||e.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=N.WebKitCSSMatrix?s.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),(i="y"===t?N.WebKitCSSMatrix?s.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5]):i)||0},parseUrlQuery:function(e){var t,a,i,s,n={},e=e||N.location.href;if("string"==typeof e&&e.length)for(s=(a=(e=-1<e.indexOf("?")?e.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<s;t+=1)i=a[t].replace(/#\S+/g,"").split("="),n[decodeURIComponent(i[0])]=void 0===i[1]?void 0:decodeURIComponent(i[1])||"";return n},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=Object(e[0]),i=1;i<e.length;i+=1){var s=e[i];if(null!=s)for(var n=Object.keys(Object(s)),o=0,r=n.length;o<r;o+=1){var l=n[o],d=Object.getOwnPropertyDescriptor(s,l);void 0!==d&&d.enumerable&&(G.isObject(a[l])&&G.isObject(s[l])?G.extend(a[l],s[l]):!G.isObject(a[l])&&G.isObject(s[l])?(a[l]={},G.extend(a[l],s[l])):a[l]=s[l])}}return a}},q=(i=p.createElement("div"),{touch:N.Modernizr&&!0===N.Modernizr.touch||!!(0<N.navigator.maxTouchPoints||"ontouchstart"in N||N.DocumentTouch&&p instanceof N.DocumentTouch),pointerEvents:!!(N.navigator.pointerEnabled||N.PointerEvent||"maxTouchPoints"in N.navigator&&0<N.navigator.maxTouchPoints),prefixedPointerEvents:!!N.navigator.msPointerEnabled,transition:"transition"in(C=i.style)||"webkitTransition"in C||"MozTransition"in C,transforms3d:N.Modernizr&&!0===N.Modernizr.csstransforms3d||("webkitPerspective"in(C=i.style)||"MozPerspective"in C||"OPerspective"in C||"MsPerspective"in C||"perspective"in C),flexbox:function(){for(var e=i.style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),a=0;a<t.length;a+=1)if(t[a]in e)return!0;return!1}(),observer:"MutationObserver"in N||"WebkitMutationObserver"in N,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});N.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in N}),j={isIE:!!N.navigator.userAgent.match(/Trident/g)||!!N.navigator.userAgent.match(/MSIE/g),isEdge:!!N.navigator.userAgent.match(/Edge/g),isSafari:0<=(m=N.navigator.userAgent.toLowerCase()).indexOf("safari")&&m.indexOf("chrome")<0&&m.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(N.navigator.userAgent)},a={components:{configurable:!0}};e.prototype.on=function(e,t,a){var i=this;if("function"!=typeof t)return i;var s=a?"unshift":"push";return e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][s](t)}),i},e.prototype.once=function(a,i,e){var s=this;return"function"!=typeof i?s:(n.f7proxy=i,s.on(a,n,e));function n(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];i.apply(s,e),s.off(a,n),n.f7proxy&&delete n.f7proxy}},e.prototype.off=function(e,i){var s=this;return s.eventsListeners&&e.split(" ").forEach(function(a){void 0===i?s.eventsListeners[a]=[]:s.eventsListeners[a]&&s.eventsListeners[a].length&&s.eventsListeners[a].forEach(function(e,t){(e===i||e.f7proxy&&e.f7proxy===i)&&s.eventsListeners[a].splice(t,1)})}),s},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a,i,s=this;if(!s.eventsListeners)return s;var n="string"==typeof e[0]||Array.isArray(e[0])?(a=e[0],i=e.slice(1,e.length),s):(a=e[0].events,i=e[0].data,e[0].context||s);return(Array.isArray(a)?a:a.split(" ")).forEach(function(e){var t;s.eventsListeners&&s.eventsListeners[e]&&(t=[],s.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(n,i)}))}),s},e.prototype.useModulesParams=function(t){var a=this;a.modules&&Object.keys(a.modules).forEach(function(e){e=a.modules[e];e.params&&G.extend(t,e.params)})},e.prototype.useModules=function(t){void 0===t&&(t={});var i=this;i.modules&&Object.keys(i.modules).forEach(function(e){var a=i.modules[e],e=t[e]||{};a.instance&&Object.keys(a.instance).forEach(function(e){var t=a.instance[e];i[e]="function"==typeof t?t.bind(i):t}),a.on&&i.on&&Object.keys(a.on).forEach(function(e){i.on(e,a.on[e])}),a.create&&a.create.bind(i)(e)})},a.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],a=arguments.length-1;0<a--;)e[a]=arguments[a+1];var i=this;i.prototype.modules||(i.prototype.modules={});var s=t.name||Object.keys(i.prototype.modules).length+"_"+G.now();return(i.prototype.modules[s]=t).proto&&Object.keys(t.proto).forEach(function(e){i.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){i[e]=t.static[e]}),t.install&&t.install.apply(i,e),i},e.use=function(e){for(var t=[],a=arguments.length-1;0<a--;)t[a]=arguments[a+1];var i=this;return Array.isArray(e)?(e.forEach(function(e){return i.installModule(e)}),i):i.installModule.apply(i,[e].concat(t))},Object.defineProperties(e,a);var s={updateSize:function(){var e=this,t=e.$el,a=void 0!==e.params.width?e.params.width:t[0].clientWidth,i=void 0!==e.params.height?e.params.height:t[0].clientHeight;0===a&&e.isHorizontal()||0===i&&e.isVertical()||(a=a-parseInt(t.css("padding-left"),10)-parseInt(t.css("padding-right"),10),i=i-parseInt(t.css("padding-top"),10)-parseInt(t.css("padding-bottom"),10),G.extend(e,{width:a,height:i,size:e.isHorizontal()?a:i}))},updateSlides:function(){var e=this,t=e.params,a=e.$wrapperEl,i=e.size,s=e.rtlTranslate,n=e.wrongRTL,o=((g=e.virtual&&t.virtual.enabled)?e.virtual:e).slides.length,r=a.children("."+e.params.slideClass),l=(g?e.virtual.slides:r).length,d=[],c=[],p=[],u=t.slidesOffsetBefore;"function"==typeof u&&(u=t.slidesOffsetBefore.call(e));var h=t.slidesOffsetAfter;"function"==typeof h&&(h=t.slidesOffsetAfter.call(e));var f,m=e.snapGrid.length,g=e.snapGrid.length,v=t.spaceBetween,b=-u,y=0,x=0;if(void 0!==i){"string"==typeof v&&0<=v.indexOf("%")&&(v=parseFloat(v.replace("%",""))/100*i),e.virtualSize=-v,s?r.css({marginLeft:"",marginTop:""}):r.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(f=Math.floor(l/t.slidesPerColumn)===l/e.params.slidesPerColumn?l:Math.ceil(l/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(f=Math.max(f,t.slidesPerView*t.slidesPerColumn)));for(var w,T,S=t.slidesPerColumn,C=f/S,E=Math.floor(l/t.slidesPerColumn),$=0;$<l;$+=1){z=0;var P,M,k,z,I,L,D,A,O,H,F=r.eq($);1<t.slidesPerColumn&&(k=M=P=void 0,"column"===t.slidesPerColumnFill||"row"===t.slidesPerColumnFill&&1<t.slidesPerGroup?("column"===t.slidesPerColumnFill?(k=$-(M=Math.floor($/S))*S,(E<M||M===E&&k===S-1)&&S<=(k+=1)&&(k=0,M+=1)):(H=Math.floor($/t.slidesPerGroup),M=$-(k=Math.floor($/t.slidesPerView)-H*t.slidesPerColumn)*t.slidesPerView-H*t.slidesPerView),F.css({"-webkit-box-ordinal-group":P=M+k*f/S,"-moz-box-ordinal-group":P,"-ms-flex-order":P,"-webkit-order":P,order:P})):M=$-(k=Math.floor($/C))*C,F.css("margin-"+(e.isHorizontal()?"top":"left"),0!==k&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",M).attr("data-swiper-row",k)),"none"!==F.css("display")&&("auto"===t.slidesPerView?(H=N.getComputedStyle(F[0],null),P=F[0].style.transform,M=F[0].style.webkitTransform,P&&(F[0].style.transform="none"),M&&(F[0].style.webkitTransform="none"),z=t.roundLengths?e.isHorizontal()?F.outerWidth(!0):F.outerHeight(!0):e.isHorizontal()?(I=parseFloat(H.getPropertyValue("width")),L=parseFloat(H.getPropertyValue("padding-left")),D=parseFloat(H.getPropertyValue("padding-right")),A=parseFloat(H.getPropertyValue("margin-left")),O=parseFloat(H.getPropertyValue("margin-right")),(k=H.getPropertyValue("box-sizing"))&&"border-box"===k&&!j.isIE?I+A+O:I+L+D+A+O):(I=parseFloat(H.getPropertyValue("height")),L=parseFloat(H.getPropertyValue("padding-top")),D=parseFloat(H.getPropertyValue("padding-bottom")),A=parseFloat(H.getPropertyValue("margin-top")),O=parseFloat(H.getPropertyValue("margin-bottom")),(H=H.getPropertyValue("box-sizing"))&&"border-box"===H&&!j.isIE?I+A+O:I+L+D+A+O),P&&(F[0].style.transform=P),M&&(F[0].style.webkitTransform=M),t.roundLengths&&(z=Math.floor(z))):(z=(i-(t.slidesPerView-1)*v)/t.slidesPerView,t.roundLengths&&(z=Math.floor(z)),r[$]&&(e.isHorizontal()?r[$].style.width=z+"px":r[$].style.height=z+"px")),r[$]&&(r[$].swiperSlideSize=z),p.push(z),t.centeredSlides?(b=b+z/2+y/2+v,0===y&&0!==$&&(b=b-i/2-v),0===$&&(b=b-i/2-v),Math.abs(b)<.001&&(b=0),t.roundLengths&&(b=Math.floor(b)),x%t.slidesPerGroup==0&&d.push(b),c.push(b)):(t.roundLengths&&(b=Math.floor(b)),x%t.slidesPerGroup==0&&d.push(b),c.push(b),b=b+z+v),e.virtualSize+=z+v,y=z,x+=1)}if(e.virtualSize=Math.max(e.virtualSize,i)+h,s&&n&&("slide"===t.effect||"coverflow"===t.effect)&&a.css({width:e.virtualSize+t.spaceBetween+"px"}),q.flexbox&&!t.setWrapperSize||(e.isHorizontal()?a.css({width:e.virtualSize+t.spaceBetween+"px"}):a.css({height:e.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(e.virtualSize=(z+t.spaceBetween)*f,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?a.css({width:e.virtualSize+t.spaceBetween+"px"}):a.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){for(var B=[],X=0;X<d.length;X+=1){var Y=d[X];t.roundLengths&&(Y=Math.floor(Y)),d[X]<e.virtualSize+d[0]&&B.push(Y)}d=B}if(!t.centeredSlides){B=[];for(var V=0;V<d.length;V+=1){var R=d[V];t.roundLengths&&(R=Math.floor(R)),d[V]<=e.virtualSize-i&&B.push(R)}d=B,1<Math.floor(e.virtualSize-i)-Math.floor(d[d.length-1])&&d.push(e.virtualSize-i)}0===d.length&&(d=[0]),0!==t.spaceBetween&&(e.isHorizontal()?s?r.css({marginLeft:v+"px"}):r.css({marginRight:v+"px"}):r.css({marginBottom:v+"px"})),t.centerInsufficientSlides&&(w=0,p.forEach(function(e){w+=e+(t.spaceBetween||0)}),(w-=t.spaceBetween)<i&&(T=(i-w)/2,d.forEach(function(e,t){d[t]=e-T}),c.forEach(function(e,t){c[t]=e+T}))),G.extend(e,{slides:r,snapGrid:d,slidesGrid:c,slidesSizesGrid:p}),l!==o&&e.emit("slidesLengthChange"),d.length!==m&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),c.length!==g&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,a,i=this,s=[],n=0;if("number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed),"auto"!==i.params.slidesPerView&&1<i.params.slidesPerView)for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var o=i.activeIndex+t;if(o>i.slides.length)break;s.push(i.slides.eq(o)[0])}else s.push(i.slides.eq(i.activeIndex)[0]);for(t=0;t<s.length;t+=1)void 0!==s[t]&&(n=n<(a=s[t].offsetHeight)?a:n);n&&i.$wrapperEl.css("height",n+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.slides,s=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var n=s?e:-e;i.removeClass(a.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var o=0;o<i.length;o+=1){var r,l,d=i[o],c=(n+(a.centeredSlides?t.minTranslate():0)-d.swiperSlideOffset)/(d.swiperSlideSize+a.spaceBetween);a.watchSlidesVisibility&&(l=(r=-(n-d.swiperSlideOffset))+t.slidesSizesGrid[o],(0<=r&&r<t.size-1||1<l&&l<=t.size||r<=0&&l>=t.size)&&(t.visibleSlides.push(d),t.visibleSlidesIndexes.push(o),i.eq(o).addClass(a.slideVisibleClass))),d.progress=s?-c:c}t.visibleSlides=S(t.visibleSlides)}},updateProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.maxTranslate()-t.minTranslate(),s=t.progress,n=t.isBeginning,o=n,r=l=t.isEnd,l=0==i?n=!(s=0):(n=(s=(e-t.minTranslate())/i)<=0,1<=s);G.extend(t,{progress:s,isBeginning:n,isEnd:l}),(a.watchSlidesProgress||a.watchSlidesVisibility)&&t.updateSlidesProgress(e),n&&!o&&t.emit("reachBeginning toEdge"),l&&!r&&t.emit("reachEnd toEdge"),(o&&!n||r&&!l)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){var e=this,t=e.slides,a=e.params,i=e.$wrapperEl,s=e.activeIndex,n=e.realIndex,o=e.virtual&&a.virtual.enabled;t.removeClass(a.slideActiveClass+" "+a.slideNextClass+" "+a.slidePrevClass+" "+a.slideDuplicateActiveClass+" "+a.slideDuplicateNextClass+" "+a.slideDuplicatePrevClass),(s=o?e.$wrapperEl.find("."+a.slideClass+'[data-swiper-slide-index="'+s+'"]'):t.eq(s)).addClass(a.slideActiveClass),a.loop&&(s.hasClass(a.slideDuplicateClass)?i.children("."+a.slideClass+":not(."+a.slideDuplicateClass+')[data-swiper-slide-index="'+n+'"]'):i.children("."+a.slideClass+"."+a.slideDuplicateClass+'[data-swiper-slide-index="'+n+'"]')).addClass(a.slideDuplicateActiveClass),n=s.nextAll("."+a.slideClass).eq(0).addClass(a.slideNextClass),a.loop&&0===n.length&&(n=t.eq(0)).addClass(a.slideNextClass),s=s.prevAll("."+a.slideClass).eq(0).addClass(a.slidePrevClass),a.loop&&0===s.length&&(s=t.eq(-1)).addClass(a.slidePrevClass),a.loop&&((n.hasClass(a.slideDuplicateClass)?i.children("."+a.slideClass+":not(."+a.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]'):i.children("."+a.slideClass+"."+a.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]')).addClass(a.slideDuplicateNextClass),(s.hasClass(a.slideDuplicateClass)?i.children("."+a.slideClass+":not(."+a.slideDuplicateClass+')[data-swiper-slide-index="'+s.attr("data-swiper-slide-index")+'"]'):i.children("."+a.slideClass+"."+a.slideDuplicateClass+'[data-swiper-slide-index="'+s.attr("data-swiper-slide-index")+'"]')).addClass(a.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t=this,a=t.rtlTranslate?t.translate:-t.translate,i=t.slidesGrid,s=t.snapGrid,n=t.params,o=t.activeIndex,r=t.realIndex,l=t.snapIndex,d=e;if(void 0===d){for(var c=0;c<i.length;c+=1)void 0!==i[c+1]?a>=i[c]&&a<i[c+1]-(i[c+1]-i[c])/2?d=c:a>=i[c]&&a<i[c+1]&&(d=c+1):a>=i[c]&&(d=c);n.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}(n=0<=s.indexOf(a)?s.indexOf(a):Math.floor(d/n.slidesPerGroup))>=s.length&&(n=s.length-1),d!==o?(s=parseInt(t.slides.eq(d).attr("data-swiper-slide-index")||d,10),G.extend(t,{snapIndex:n,realIndex:s,previousIndex:o,activeIndex:d}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),r!==s&&t.emit("realIndexChange"),(t.initialized||t.runCallbacksOnInit)&&t.emit("slideChange")):n!==l&&(t.snapIndex=n,t.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,a=t.params,i=S(e.target).closest("."+a.slideClass)[0],s=!1;if(i)for(var n=0;n<t.slides.length;n+=1)t.slides[n]===i&&(s=!0);if(!i||!s)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(S(i).attr("data-swiper-slide-index"),10):t.clickedIndex=S(i).index(),a.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var o={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,a=this.rtlTranslate,i=this.translate,s=this.$wrapperEl;return t.virtualTranslate?a?-i:i:(e=G.getTranslate(s[0],e),(e=a?-e:e)||0)},setTranslate:function(e,t){var a=this,i=a.rtlTranslate,s=a.params,n=a.$wrapperEl,o=a.progress,r=0,l=0;a.isHorizontal()?r=i?-e:e:l=e,s.roundLengths&&(r=Math.floor(r),l=Math.floor(l)),s.virtualTranslate||(q.transforms3d?n.transform("translate3d("+r+"px, "+l+"px, 0px)"):n.transform("translate("+r+"px, "+l+"px)")),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?r:l,(0==(l=a.maxTranslate()-a.minTranslate())?0:(e-a.minTranslate())/l)!==o&&a.updateProgress(e),a.emit("setTranslate",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}};var r={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.params,n=a.previousIndex;s.autoHeight&&a.updateAutoHeight(),t=t||(n<i?"next":i<n?"prev":"reset"),a.emit("transitionStart"),e&&i!==n&&("reset"!==t?(a.emit("slideChangeTransitionStart"),"next"===t?a.emit("slideNextTransitionStart"):a.emit("slidePrevTransitionStart")):a.emit("slideResetTransitionStart"))},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.previousIndex;a.animating=!1,a.setTransition(0),t=t||(s<i?"next":i<s?"prev":"reset"),a.emit("transitionEnd"),e&&i!==s&&("reset"!==t?(a.emit("slideChangeTransitionEnd"),"next"===t?a.emit("slideNextTransitionEnd"):a.emit("slidePrevTransitionEnd")):a.emit("slideResetTransitionEnd"))}};var d={slideTo:function(e,t,a,i){void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var s=this,n=e=void 0===e?0:e;n<0&&(n=0);var o=s.params,r=s.snapGrid,l=s.slidesGrid,d=s.previousIndex,c=s.activeIndex,p=s.rtlTranslate;if(s.animating&&o.preventInteractionOnTransition)return!1;(e=Math.floor(n/o.slidesPerGroup))>=r.length&&(e=r.length-1),(c||o.initialSlide||0)===(d||0)&&a&&s.emit("beforeSlideChangeStart");var u,h=-r[e];if(s.updateProgress(h),o.normalizeSlideIndex)for(var f=0;f<l.length;f+=1)-Math.floor(100*h)>=Math.floor(100*l[f])&&(n=f);if(s.initialized&&n!==c){if(!s.allowSlideNext&&h<s.translate&&h<s.minTranslate())return!1;if(!s.allowSlidePrev&&h>s.translate&&h>s.maxTranslate()&&(c||0)!==n)return!1}return u=c<n?"next":n<c?"prev":"reset",p&&-h===s.translate||!p&&h===s.translate?(s.updateActiveIndex(n),o.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==o.effect&&s.setTranslate(h),"reset"!==u&&(s.transitionStart(a,u),s.transitionEnd(a,u)),!1):(0!==t&&q.transition?(s.setTransition(t),s.setTranslate(h),s.updateActiveIndex(n),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,i),s.transitionStart(a,u),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(a,u))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))):(s.setTransition(0),s.setTranslate(h),s.updateActiveIndex(n),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,i),s.transitionStart(a,u),s.transitionEnd(a,u)),!0)},slideToLoop:function(e,t,a,i){return void 0===t&&(t=this.params.speed),e=void 0===e?0:e,this.params.loop&&(e+=this.loopedSlides),this.slideTo(e,t,a=void 0===a?!0:a,i)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,n=i.animating;return s.loop?!n&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,i.slideTo(i.activeIndex+s.slidesPerGroup,e,t,a)):i.slideTo(i.activeIndex+s.slidesPerGroup,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,n=i.animating,o=i.snapGrid,r=i.slidesGrid,l=i.rtlTranslate;if(s.loop){if(n)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,n=d(l?i.translate:-i.translate),l=o.map(d);return void 0!==(n=(r.map(d),o[l.indexOf(n)],o[l.indexOf(n)-1]))&&(c=r.indexOf(n))<0&&(c=i.activeIndex-1),i.slideTo(c,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),this.slideTo(this.activeIndex,e,t=void 0===t?!0:t,a)},slideToClosest:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i,s,n=this,o=n.activeIndex,r=Math.floor(o/n.params.slidesPerGroup);return r<n.snapGrid.length-1&&(i=n.rtlTranslate?n.translate:-n.translate,s=n.snapGrid[r],(n.snapGrid[r+1]-s)/2<i-s&&(o=n.params.slidesPerGroup)),n.slideTo(o,e,t,a)},slideToClickedSlide:function(){var e,t=this,a=t.params,i=t.$wrapperEl,s="auto"===a.slidesPerView?t.slidesPerViewDynamic():a.slidesPerView,n=t.clickedIndex;a.loop?t.animating||(e=parseInt(S(t.clickedSlide).attr("data-swiper-slide-index"),10),a.centeredSlides?n<t.loopedSlides-s/2||n>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),n=i.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+a.slideDuplicateClass+")").eq(0).index(),G.nextTick(function(){t.slideTo(n)})):t.slideTo(n):n>t.slides.length-s?(t.loopFix(),n=i.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+a.slideDuplicateClass+")").eq(0).index(),G.nextTick(function(){t.slideTo(n)})):t.slideTo(n)):t.slideTo(n)}};var c={loopCreate:function(){var i=this,e=i.params,t=i.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var s=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var a=e.slidesPerGroup-s.length%e.slidesPerGroup;if(a!==e.slidesPerGroup){for(var n=0;n<a;n+=1){var o=S(p.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(o)}s=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=s.length),i.loopedSlides=parseInt(e.loopedSlides||e.slidesPerView,10),i.loopedSlides+=e.loopAdditionalSlides,i.loopedSlides>s.length&&(i.loopedSlides=s.length);var r=[],l=[];s.each(function(e,t){var a=S(t);e<i.loopedSlides&&l.push(t),e<s.length&&e>=s.length-i.loopedSlides&&r.push(t),a.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append(S(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var c=r.length-1;0<=c;--c)t.prepend(S(r[c].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){var e=this,t=e.params,a=e.activeIndex,i=e.slides,s=e.loopedSlides,n=e.allowSlidePrev,o=e.allowSlideNext,r=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d,r=-r[a]-e.getTranslate();a<s?(d=i.length-3*s+a,e.slideTo(d+=s,0,!1,!0)&&0!=r&&e.setTranslate((l?-e.translate:e.translate)-r)):("auto"===t.slidesPerView&&2*s<=a||a>=i.length-s)&&(d=-i.length+a+s,e.slideTo(d+=s,0,!1,!0)&&0!=r&&e.setTranslate((l?-e.translate:e.translate)-r)),e.allowSlidePrev=n,e.allowSlideNext=o},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,a=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),a.removeAttr("data-swiper-slide-index")}};var u={setGrabCursor:function(e){var t;q.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||((t=this.el).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){q.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}};var h,f,m,g={appendSlide:function(e){var t=this,a=t.$wrapperEl,i=t.params;if(i.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&a.append(e[s]);else a.append(e);i.loop&&t.loopCreate(),i.observer&&q.observer||t.update()},prependSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&t.loopDestroy();var n=s+1;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)e[o]&&i.prepend(e[o]);n=s+e.length}else i.prepend(e);a.loop&&t.loopCreate(),a.observer&&q.observer||t.update(),t.slideTo(n,0,!1)},addSlide:function(e,t){var a=this,i=a.$wrapperEl,s=a.params,n=a.activeIndex;s.loop&&(n-=a.loopedSlides,a.loopDestroy(),a.slides=i.children("."+s.slideClass));var o=a.slides.length;if(e<=0)a.prependSlide(t);else if(o<=e)a.appendSlide(t);else{for(var r=e<n?n+1:n,l=[],d=o-1;e<=d;--d){var c=a.slides.eq(d);c.remove(),l.unshift(c)}if("object"==typeof t&&"length"in t){for(var p=0;p<t.length;p+=1)t[p]&&i.append(t[p]);r=e<n?n+t.length:n}else i.append(t);for(var u=0;u<l.length;u+=1)i.append(l[u]);s.loop&&a.loopCreate(),s.observer&&q.observer||a.update(),s.loop?a.slideTo(r+a.loopedSlides,0,!1):a.slideTo(r,0,!1)}},removeSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=i.children("."+a.slideClass));var n,o=s;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)n=e[r],t.slides[n]&&t.slides.eq(n).remove(),n<o&&--o;o=Math.max(o,0)}else t.slides[n=e]&&t.slides.eq(n).remove(),n<o&&--o,o=Math.max(o,0);a.loop&&t.loopCreate(),a.observer&&q.observer||t.update(),a.loop?t.slideTo(o+t.loopedSlides,0,!1):t.slideTo(o,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},v=(E=N.navigator.userAgent,$={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:N.cordova||N.phonegap,phonegap:N.cordova||N.phonegap},h=E.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),f=E.match(/(Android);?[\s\/]+([\d.]+)?/),C=E.match(/(iPad).*OS\s([\d_]+)/),m=E.match(/(iPod)(.*OS\s([\d_]+))?/),a=!C&&E.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h&&($.os="windows",$.osVersion=h[2],$.windows=!0),f&&!h&&($.os="android",$.osVersion=f[2],$.android=!0,$.androidChrome=0<=E.toLowerCase().indexOf("chrome")),(C||a||m)&&($.os="ios",$.ios=!0),a&&!m&&($.osVersion=a[2].replace(/_/g,"."),$.iphone=!0),C&&($.osVersion=C[2].replace(/_/g,"."),$.ipad=!0),m&&($.osVersion=m[3]?m[3].replace(/_/g,"."):null,$.iphone=!0),$.ios&&$.osVersion&&0<=E.indexOf("Version/")&&"10"===$.osVersion.split(".")[0]&&($.osVersion=E.toLowerCase().split("version/")[1].split(" ")[0]),$.desktop=!($.os||$.android||$.webView),$.webView=(a||C||m)&&E.match(/.*AppleWebKit(?!.*Safari)/i),$.os&&"ios"===$.os&&(C=$.osVersion.split("."),E=p.querySelector('meta[name="viewport"]'),$.minimalUi=!$.webView&&(m||a)&&(7==+C[0]?1<=+C[1]:7<+C[0])&&E&&0<=E.getAttribute("content").indexOf("minimal-ui")),$.pixelRatio=N.devicePixelRatio||1,$);function b(){var e,t,a,i=this,s=i.params,n=i.el;n&&0===n.offsetWidth||(s.breakpoints&&i.setBreakpoint(),e=i.allowSlideNext,t=i.allowSlidePrev,a=i.snapGrid,i.allowSlideNext=!0,i.allowSlidePrev=!0,i.updateSize(),i.updateSlides(),s.freeMode?(n=Math.min(Math.max(i.translate,i.maxTranslate()),i.minTranslate()),i.setTranslate(n),i.updateActiveIndex(),i.updateSlidesClasses(),s.autoHeight&&i.updateAutoHeight()):(i.updateSlidesClasses(),("auto"===s.slidesPerView||1<s.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0)),i.autoplay&&i.autoplay.running&&i.autoplay.paused&&i.autoplay.run(),i.allowSlidePrev=t,i.allowSlideNext=e,i.params.watchOverflow&&a!==i.snapGrid&&i.checkOverflow())}var y={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsInverse:!1,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},x={update:s,translate:o,transition:r,slide:d,loop:c,grabCursor:u,manipulation:g,events:{attachEvents:function(){var e=this,t=e.params,a=e.touchEvents,i=e.el,s=e.wrapperEl;e.onTouchStart=function(e){var t,a,i,s,n=this,o=n.touchEventsData,r=n.params,l=n.touches;n.animating&&r.preventInteractionOnTransition||((t=e).originalEvent&&(t=t.originalEvent),o.isTouchEvent="touchstart"===t.type,!o.isTouchEvent&&"which"in t&&3===t.which||!o.isTouchEvent&&"button"in t&&0<t.button||o.isTouched&&o.isMoved||(r.noSwiping&&S(t.target).closest(r.noSwipingSelector||"."+r.noSwipingClass)[0]?n.allowClick=!0:r.swipeHandler&&!S(t).closest(r.swipeHandler)[0]||(l.currentX=("touchstart"===t.type?t.targetTouches[0]:t).pageX,l.currentY=("touchstart"===t.type?t.targetTouches[0]:t).pageY,a=l.currentX,s=l.currentY,i=r.edgeSwipeDetection||r.iOSEdgeSwipeDetection,e=r.edgeSwipeThreshold||r.iOSEdgeSwipeThreshold,i&&(a<=e||a>=N.screen.width-e)||(G.extend(o,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=a,l.startY=s,o.touchStartTime=G.now(),n.allowClick=!0,n.updateSize(),n.swipeDirection=void 0,0<r.threshold&&(o.allowThresholdMove=!1),"touchstart"!==t.type&&(s=!0,S(t.target).is(o.formElements)&&(s=!1),p.activeElement&&S(p.activeElement).is(o.formElements)&&p.activeElement!==t.target&&p.activeElement.blur(),s=s&&n.allowTouchMove&&r.touchStartPreventDefault,(r.touchStartForcePreventDefault||s)&&t.preventDefault()),n.emit("touchStart",t)))))}.bind(e),e.onTouchMove=function(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,n=t.rtlTranslate,o=e;if(o.originalEvent&&(o=o.originalEvent),a.isTouched){if(!a.isTouchEvent||"mousemove"!==o.type){var r=("touchmove"===o.type?o.targetTouches[0]:o).pageX,l=("touchmove"===o.type?o.targetTouches[0]:o).pageY;if(o.preventedByNestedSwiper)return s.startX=r,void(s.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(a.isTouched&&(G.extend(s,{startX:r,startY:l,currentX:r,currentY:l}),a.touchStartTime=G.now()));if(a.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(t.isVertical()){if(l<s.startY&&t.translate<=t.maxTranslate()||l>s.startY&&t.translate>=t.minTranslate())return a.isTouched=!1,void(a.isMoved=!1)}else if(r<s.startX&&t.translate<=t.maxTranslate()||r>s.startX&&t.translate>=t.minTranslate())return;if(a.isTouchEvent&&p.activeElement&&o.target===p.activeElement&&S(o.target).is(a.formElements))return a.isMoved=!0,void(t.allowClick=!1);if(a.allowTouchCallbacks&&t.emit("touchMove",o),!(o.targetTouches&&1<o.targetTouches.length)){s.currentX=r,s.currentY=l;e=s.currentX-s.startX,r=s.currentY-s.startY;if(!(t.params.threshold&&Math.sqrt(Math.pow(e,2)+Math.pow(r,2))<t.params.threshold))if(void 0===a.isScrolling&&(t.isHorizontal()&&s.currentY===s.startY||t.isVertical()&&s.currentX===s.startX?a.isScrolling=!1:25<=e*e+r*r&&(l=180*Math.atan2(Math.abs(r),Math.abs(e))/Math.PI,a.isScrolling=t.isHorizontal()?l>i.touchAngle:90-l>i.touchAngle)),a.isScrolling&&t.emit("touchMoveOpposite",o),void 0===a.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(a.startMoving=!0)),a.isScrolling)a.isTouched=!1;else if(a.startMoving){t.allowClick=!1,o.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&o.stopPropagation(),a.isMoved||(i.loop&&t.loopFix(),a.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),a.allowMomentumBounce=!1,!i.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",o)),t.emit("sliderMove",o),a.isMoved=!0;e=t.isHorizontal()?e:r;s.diff=e,e*=i.touchRatio,t.swipeDirection=0<(e=n?-e:e)?"prev":"next",a.currentTranslate=e+a.startTranslate;r=!0,n=i.resistanceRatio;if(i.touchReleaseOnEdges&&(n=0),0<e&&a.currentTranslate>t.minTranslate()?(r=!1,i.resistance&&(a.currentTranslate=t.minTranslate()-1+Math.pow(-t.minTranslate()+a.startTranslate+e,n))):e<0&&a.currentTranslate<t.maxTranslate()&&(r=!1,i.resistance&&(a.currentTranslate=t.maxTranslate()+1-Math.pow(t.maxTranslate()-a.startTranslate-e,n))),r&&(o.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&a.currentTranslate<a.startTranslate&&(a.currentTranslate=a.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&a.currentTranslate>a.startTranslate&&(a.currentTranslate=a.startTranslate),0<i.threshold){if(!(Math.abs(e)>i.threshold||a.allowThresholdMove))return void(a.currentTranslate=a.startTranslate);if(!a.allowThresholdMove)return a.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,a.currentTranslate=a.startTranslate,void(s.diff=t.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}i.followFinger&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),i.freeMode&&(0===a.velocities.length&&a.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:a.touchStartTime}),a.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:G.now()})),t.updateProgress(a.currentTranslate),t.setTranslate(a.currentTranslate))}}}}else a.startMoving&&a.isScrolling&&t.emit("touchMoveOpposite",o)}.bind(e),e.onTouchEnd=function(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,n=t.rtlTranslate,o=t.$wrapperEl,r=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),a.allowTouchCallbacks&&t.emit("touchEnd",d),a.allowTouchCallbacks=!1,!a.isTouched)return a.isMoved&&i.grabCursor&&t.setGrabCursor(!1),a.isMoved=!1,void(a.startMoving=!1);i.grabCursor&&a.isMoved&&a.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,p=G.now(),e=p-a.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap",d),e<300&&300<p-a.lastClickTime&&(a.clickTimeout&&clearTimeout(a.clickTimeout),a.clickTimeout=G.nextTick(function(){t&&!t.destroyed&&t.emit("click",d)},300)),e<300&&p-a.lastClickTime<300&&(a.clickTimeout&&clearTimeout(a.clickTimeout),t.emit("doubleTap",d))),a.lastClickTime=G.now(),G.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!a.isTouched||!a.isMoved||!t.swipeDirection||0===s.diff||a.currentTranslate===a.startTranslate)return a.isTouched=!1,a.isMoved=!1,void(a.startMoving=!1);if(a.isTouched=!1,a.isMoved=!1,a.startMoving=!1,c=i.followFinger?n?t.translate:-t.translate:-a.currentTranslate,i.freeMode)if(c<-t.minTranslate())t.slideTo(t.activeIndex);else if(c>-t.maxTranslate())t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1);else{if(i.freeModeMomentum){1<a.velocities.length?(v=a.velocities.pop(),h=a.velocities.pop(),u=v.position-h.position,h=v.time-h.time,t.velocity=u/h,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(150<h||300<G.now()-v.time)&&(t.velocity=0)):t.velocity=0,t.velocity*=i.freeModeMomentumVelocityRatio,a.velocities.length=0;var u=1e3*i.freeModeMomentumRatio,h=t.velocity*u,f=t.translate+h;n&&(f=-f);var m,g,v=!1,h=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(f<t.maxTranslate())i.freeModeMomentumBounce?(f+t.maxTranslate()<-h&&(f=t.maxTranslate()-h),m=t.maxTranslate(),a.allowMomentumBounce=v=!0):f=t.maxTranslate(),i.loop&&i.centeredSlides&&(g=!0);else if(f>t.minTranslate())i.freeModeMomentumBounce?(f-t.minTranslate()>h&&(f=t.minTranslate()+h),m=t.minTranslate(),a.allowMomentumBounce=v=!0):f=t.minTranslate(),i.loop&&i.centeredSlides&&(g=!0);else if(i.freeModeSticky){for(var b,y=0;y<l.length;y+=1)if(l[y]>-f){b=y;break}f=-(f=Math.abs(l[b]-f)<Math.abs(l[b-1]-f)||"next"===t.swipeDirection?l[b]:l[b-1])}if(g&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)u=n?Math.abs((-f-t.translate)/t.velocity):Math.abs((f-t.translate)/t.velocity);else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&v?(t.updateProgress(m),t.setTransition(u),t.setTranslate(f),t.transitionStart(!0,t.swipeDirection),t.animating=!0,o.transitionEnd(function(){t&&!t.destroyed&&a.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),t.setTranslate(m),o.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(f),t.setTransition(u),t.setTranslate(f),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,o.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(f),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();(!i.freeModeMomentum||e>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var x=0,w=t.slidesSizesGrid[0],T=0;T<r.length;T+=i.slidesPerGroup)void 0!==r[T+i.slidesPerGroup]?c>=r[T]&&c<r[T+i.slidesPerGroup]&&(w=r[(x=T)+i.slidesPerGroup]-r[T]):c>=r[T]&&(x=T,w=r[r.length-1]-r[r.length-2]);u=(c-r[x])/w;e>i.longSwipesMs?i.longSwipes?("next"===t.swipeDirection&&(u>=i.longSwipesRatio?t.slideTo(x+i.slidesPerGroup):t.slideTo(x)),"prev"===t.swipeDirection&&(u>1-i.longSwipesRatio?t.slideTo(x+i.slidesPerGroup):t.slideTo(x))):t.slideTo(t.activeIndex):i.shortSwipes?("next"===t.swipeDirection&&t.slideTo(x+i.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(x)):t.slideTo(t.activeIndex)}}.bind(e),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var n="container"===t.touchEventsTarget?i:s,i=!!t.nested;q.touch||!q.pointerEvents&&!q.prefixedPointerEvents?(q.touch&&(s=!("touchstart"!==a.start||!q.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},n.addEventListener(a.start,e.onTouchStart,s),n.addEventListener(a.move,e.onTouchMove,q.passiveListener?{passive:!1,capture:i}:i),n.addEventListener(a.end,e.onTouchEnd,s)),(t.simulateTouch&&!v.ios&&!v.android||t.simulateTouch&&!q.touch&&v.ios)&&(n.addEventListener("mousedown",e.onTouchStart,!1),p.addEventListener("mousemove",e.onTouchMove,i),p.addEventListener("mouseup",e.onTouchEnd,!1))):(n.addEventListener(a.start,e.onTouchStart,!1),p.addEventListener(a.move,e.onTouchMove,i),p.addEventListener(a.end,e.onTouchEnd,!1)),(t.preventClicks||t.preventClicksPropagation)&&n.addEventListener("click",e.onClick,!0),e.on(v.ios||v.android?"resize orientationchange observerUpdate":"resize observerUpdate",b,!0)},detachEvents:function(){var e=this,t=e.params,a=e.touchEvents,i=e.el,s=e.wrapperEl,n="container"===t.touchEventsTarget?i:s,i=!!t.nested;q.touch||!q.pointerEvents&&!q.prefixedPointerEvents?(q.touch&&(s=!("onTouchStart"!==a.start||!q.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},n.removeEventListener(a.start,e.onTouchStart,s),n.removeEventListener(a.move,e.onTouchMove,i),n.removeEventListener(a.end,e.onTouchEnd,s)),(t.simulateTouch&&!v.ios&&!v.android||t.simulateTouch&&!q.touch&&v.ios)&&(n.removeEventListener("mousedown",e.onTouchStart,!1),p.removeEventListener("mousemove",e.onTouchMove,i),p.removeEventListener("mouseup",e.onTouchEnd,!1))):(n.removeEventListener(a.start,e.onTouchStart,!1),p.removeEventListener(a.move,e.onTouchMove,i),p.removeEventListener(a.end,e.onTouchEnd,!1)),(t.preventClicks||t.preventClicksPropagation)&&n.removeEventListener("click",e.onClick,!0),e.off(v.ios||v.android?"resize orientationchange observerUpdate":"resize observerUpdate",b)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,a=e.initialized,i=e.loopedSlides;void 0===i&&(i=0);var s,n,o,r=e.params,l=r.breakpoints;!l||0===Object.keys(l).length||(s=e.getBreakpoint(l))&&e.currentBreakpoint!==s&&((n=s in l?l[s]:void 0)&&["slidesPerView","spaceBetween","slidesPerGroup"].forEach(function(e){var t=n[e];void 0!==t&&(n[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}),l=(o=n||e.originalParams).direction&&o.direction!==r.direction,r=r.loop&&(o.slidesPerView!==r.slidesPerView||l),l&&a&&e.changeDirection(),G.extend(e.params,o),G.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=s,r&&a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-i+e.loopedSlides,0,!1)),e.emit("breakpoint",o))},getBreakpoint:function(e){if(e){var t=!1,a=[];Object.keys(e).forEach(function(e){a.push(e)}),a.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var i=0;i<a.length;i+=1){var s=a[i];this.params.breakpointsInverse?s<=N.innerWidth&&(t=s):s>=N.innerWidth&&!t&&(t=s)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,a=this.params,e=this.rtl,i=this.$el,s=[];s.push("initialized"),s.push(a.direction),a.freeMode&&s.push("free-mode"),q.flexbox||s.push("no-flexbox"),a.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<a.slidesPerColumn&&s.push("multirow"),v.android&&s.push("android"),v.ios&&s.push("ios"),(j.isIE||j.isEdge)&&(q.pointerEvents||q.prefixedPointerEvents)&&s.push("wp8-"+a.direction),s.forEach(function(e){t.push(a.containerModifierClass+e)}),i.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,a,i,s,n){function o(){n&&n()}(!e.complete||!s)&&t?((s=new N.Image).onload=o,s.onerror=o,i&&(s.sizes=i),a&&(s.srcset=a),t&&(s.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var a=0;a<e.imagesToLoad.length;a+=1){var i=e.imagesToLoad[a];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},w={},T=function(l){function d(){for(var a,e=[],t=arguments.length;t--;)e[t]=arguments[t];a=(a=1===e.length&&e[0].constructor&&e[0].constructor===Object?e[0]:(n=e[0],e[1]))||{},a=G.extend({},a),n&&!a.el&&(a.el=n),l.call(this,a),Object.keys(x).forEach(function(t){Object.keys(x[t]).forEach(function(e){d.prototype[e]||(d.prototype[e]=x[t][e])})});var i=this;void 0===i.modules&&(i.modules={}),Object.keys(i.modules).forEach(function(e){var t=i.modules[e];t.params&&(e=Object.keys(t.params)[0],"object"==typeof(t=t.params[e])&&null!==t&&e in a&&"enabled"in t&&(!0===a[e]&&(a[e]={enabled:!0}),"object"!=typeof a[e]||"enabled"in a[e]||(a[e].enabled=!0),a[e]||(a[e]={enabled:!1})))});var s=G.extend({},y);i.useModulesParams(s),i.params=G.extend({},s,w,a),i.originalParams=G.extend({},i.params),i.passedParams=G.extend({},a);var n,o=(i.$=S)(i.params.el);if(n=o[0]){if(1<o.length){var r=[];return o.each(function(e,t){t=G.extend({},a,{el:t});r.push(new d(t))}),r}n.swiper=i,o.data("swiper",i);var s=o.children("."+i.params.wrapperClass);return G.extend(i,{$el:o,el:n,$wrapperEl:s,wrapperEl:s[0],classNames:[],slides:S(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===i.params.direction},isVertical:function(){return"vertical"===i.params.direction},rtl:"rtl"===n.dir.toLowerCase()||"rtl"===o.css("direction"),rtlTranslate:"horizontal"===i.params.direction&&("rtl"===n.dir.toLowerCase()||"rtl"===o.css("direction")),wrongRTL:"-webkit-box"===s.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:i.params.allowSlideNext,allowSlidePrev:i.params.allowSlidePrev,touchEvents:(o=["touchstart","touchmove","touchend"],s=["mousedown","mousemove","mouseup"],q.pointerEvents?s=["pointerdown","pointermove","pointerup"]:q.prefixedPointerEvents&&(s=["MSPointerDown","MSPointerMove","MSPointerUp"]),i.touchEventsTouch={start:o[0],move:o[1],end:o[2]},i.touchEventsDesktop={start:s[0],move:s[1],end:s[2]},q.touch||!i.params.simulateTouch?i.touchEventsTouch:i.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:G.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:i.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),i.useModules(),i.params.init&&i.init(),i}}l&&(d.__proto__=l);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return((d.prototype=Object.create(l&&l.prototype)).constructor=d).prototype.slidesPerViewDynamic=function(){var e=this,t=e.params,a=e.slides,i=e.slidesGrid,s=e.size,n=e.activeIndex,o=1;if(t.centeredSlides){for(var r,l=a[n].swiperSlideSize,d=n+1;d<a.length;d+=1)a[d]&&!r&&(o+=1,s<(l+=a[d].swiperSlideSize)&&(r=!0));for(var c=n-1;0<=c;--c)a[c]&&!r&&(o+=1,s<(l+=a[c].swiperSlideSize)&&(r=!0))}else for(var p=n+1;p<a.length;p+=1)i[p]-i[n]<s&&(o+=1);return o},d.prototype.update=function(){var e,t,a=this;function i(){var e=a.rtlTranslate?-1*a.translate:a.translate,e=Math.min(Math.max(e,a.maxTranslate()),a.minTranslate());a.setTranslate(e),a.updateActiveIndex(),a.updateSlidesClasses()}a&&!a.destroyed&&(e=a.snapGrid,(t=a.params).breakpoints&&a.setBreakpoint(),a.updateSize(),a.updateSlides(),a.updateProgress(),a.updateSlidesClasses(),a.params.freeMode?(i(),a.params.autoHeight&&a.updateAutoHeight()):(("auto"===a.params.slidesPerView||1<a.params.slidesPerView)&&a.isEnd&&!a.params.centeredSlides?a.slideTo(a.slides.length-1,0,!1,!0):a.slideTo(a.activeIndex,0,!1,!0))||i(),t.watchOverflow&&e!==a.snapGrid&&a.checkOverflow(),a.emit("update"))},d.prototype.changeDirection=function(a,e){void 0===e&&(e=!0);var t=this,i=t.params.direction;return(a=a||("horizontal"===i?"vertical":"horizontal"))===i||"horizontal"!==a&&"vertical"!==a||(t.$el.removeClass(""+t.params.containerModifierClass+i+" wp8-"+i).addClass(""+t.params.containerModifierClass+a),(j.isIE||j.isEdge)&&(q.pointerEvents||q.prefixedPointerEvents)&&t.$el.addClass(t.params.containerModifierClass+"wp8-"+a),t.params.direction=a,t.slides.each(function(e,t){"vertical"===a?t.style.width="":t.style.height=""}),t.emit("changeDirection"),e&&t.update()),t},d.prototype.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},d.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var a=this,i=a.params,s=a.$el,n=a.$wrapperEl,o=a.slides;return void 0===a.params||a.destroyed||(a.emit("beforeDestroy"),a.initialized=!1,a.detachEvents(),i.loop&&a.loopDestroy(),t&&(a.removeClasses(),s.removeAttr("style"),n.removeAttr("style"),o&&o.length&&o.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),a.emit("destroy"),Object.keys(a.eventsListeners).forEach(function(e){a.off(e)}),!1!==e&&(a.$el[0].swiper=null,a.$el.data("swiper",null),G.deleteProps(a)),a.destroyed=!0),null},d.extendDefaults=function(e){G.extend(w,e)},e.extendedDefaults.get=function(){return w},e.defaults.get=function(){return y},e.Class.get=function(){return l},e.$.get=function(){return S},Object.defineProperties(d,e),d}(e),C={name:"device",proto:{device:v},static:{device:v}},E={name:"support",proto:{support:q},static:{support:q}},$={name:"browser",proto:{browser:j},static:{browser:j}},s={name:"resize",create:function(){var e=this;G.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){N.addEventListener("resize",this.resize.resizeHandler),N.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){N.removeEventListener("resize",this.resize.resizeHandler),N.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},P={func:N.MutationObserver||N.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var a=this,i=new P.func(function(e){var t;1!==e.length?(t=function(){a.emit("observerUpdate",e[0])},N.requestAnimationFrame?N.requestAnimationFrame(t):N.setTimeout(t,0)):a.emit("observerUpdate",e[0])});i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),a.observer.observers.push(i)},init:function(){var e=this;if(q.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),a=0;a<t.length;a+=1)e.observer.attach(t[a]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},o={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){G.extend(this,{observer:{init:P.init.bind(this),attach:P.attach.bind(this),destroy:P.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},M={update:function(e){var t=this,a=t.params,i=a.slidesPerView,s=a.slidesPerGroup,n=a.centeredSlides,o=t.params.virtual,r=o.addSlidesBefore,l=o.addSlidesAfter,d=t.virtual,c=d.from,p=d.to,u=d.slides,h=d.slidesGrid,f=d.renderSlide,a=d.offset;t.updateActiveIndex();var o=t.activeIndex||0,d=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",l=n?(v=Math.floor(i/2)+s+r,Math.floor(i/2)+s+l):(v=i+(s-1)+r,s+l),m=Math.max((o||0)-l,0),g=Math.min((o||0)+v,u.length-1),v=(t.slidesGrid[m]||0)-(t.slidesGrid[0]||0);function b(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(G.extend(t.virtual,{from:m,to:g,offset:v,slidesGrid:t.slidesGrid}),c===m&&p===g&&!e)return t.slidesGrid!==h&&v!==a&&t.slides.css(d,v+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:v,from:m,to:g,slides:function(){for(var e=[],t=m;t<=g;t+=1)e.push(u[t]);return e}()}),void b();var y=[],x=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var w=c;w<=p;w+=1)(w<m||g<w)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+w+'"]').remove();for(var T=0;T<u.length;T+=1)m<=T&&T<=g&&(void 0===p||e?x.push(T):(p<T&&x.push(T),T<c&&y.push(T)));x.forEach(function(e){t.$wrapperEl.append(f(u[e],e))}),y.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(u[e],e))}),t.$wrapperEl.children(".swiper-slide").css(d,v+"px"),b()},renderSlide:function(e,t){var a=this,i=a.params.virtual;if(i.cache&&a.virtual.cache[t])return a.virtual.cache[t];e=i.renderSlide?S(i.renderSlide.call(a,e,t)):S('<div class="'+a.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return e.attr("data-swiper-slide-index")||e.attr("data-swiper-slide-index",t),i.cache&&(a.virtual.cache[t]=e),e},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t,a,i=this,s=i.activeIndex,n=s+1,o=1;if(Array.isArray(e)){for(var r=0;r<e.length;r+=1)e[r]&&i.virtual.slides.unshift(e[r]);n=s+e.length,o=e.length}else i.virtual.slides.unshift(e);i.params.virtual.cache&&(t=i.virtual.cache,a={},Object.keys(t).forEach(function(e){a[parseInt(e,10)+o]=t[e]}),i.virtual.cache=a),i.virtual.update(!0),i.slideTo(n,0)},removeSlide:function(e){var t=this;if(null!=e){var a=t.activeIndex;if(Array.isArray(e))for(var i=e.length-1;0<=i;--i)t.virtual.slides.splice(e[i],1),t.params.virtual.cache&&delete t.virtual.cache[e[i]],e[i]<a&&--a,a=Math.max(a,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<a&&--a,a=Math.max(a,0);t.virtual.update(!0),t.slideTo(a,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},r={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){var e=this;G.extend(e,{virtual:{update:M.update.bind(e),appendSlide:M.appendSlide.bind(e),prependSlide:M.prependSlide.bind(e),removeSlide:M.removeSlide.bind(e),removeAllSlides:M.removeAllSlides.bind(e),renderSlide:M.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e,t=this;t.params.virtual.enabled&&(t.classNames.push(t.params.containerModifierClass+"virtual"),G.extend(t.params,e={watchSlidesProgress:!0}),G.extend(t.originalParams,e),t.params.initialSlide||t.virtual.update())},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},k={handle:function(e){var t=this,a=t.rtlTranslate,i=e,s=(i=i.originalEvent?i.originalEvent:i).keyCode||i.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===s||t.isVertical()&&40===s||34===s))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===s||t.isVertical()&&38===s||33===s))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||p.activeElement&&p.activeElement.nodeName&&("input"===p.activeElement.nodeName.toLowerCase()||"textarea"===p.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(33===s||34===s||37===s||39===s||38===s||40===s)){var n=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var o=N.innerWidth,r=N.innerHeight,e=t.$el.offset();a&&(e.left-=t.$el[0].scrollLeft);for(var l=[[e.left,e.top],[e.left+t.width,e.top],[e.left,e.top+t.height],[e.left+t.width,e.top+t.height]],d=0;d<l.length;d+=1){var c=l[d];0<=c[0]&&c[0]<=o&&0<=c[1]&&c[1]<=r&&(n=!0)}if(!n)return}t.isHorizontal()?(33!==s&&34!==s&&37!==s&&39!==s||(i.preventDefault?i.preventDefault():i.returnValue=!1),(34!==s&&39!==s||a)&&(33!==s&&37!==s||!a)||t.slideNext(),(33!==s&&37!==s||a)&&(34!==s&&39!==s||!a)||t.slidePrev()):(33!==s&&34!==s&&38!==s&&40!==s||(i.preventDefault?i.preventDefault():i.returnValue=!1),34!==s&&40!==s||t.slideNext(),33!==s&&38!==s||t.slidePrev()),t.emit("keyPress",s)}},enable:function(){this.keyboard.enabled||(S(p).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(S(p).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},d={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){G.extend(this,{keyboard:{enabled:!1,enable:k.enable.bind(this),disable:k.disable.bind(this),handle:k.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}};var z={lastScrollTime:G.now(),event:-1<N.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":((u=(c="onwheel")in p)||((g=p.createElement("div")).setAttribute(c,"return;"),u="function"==typeof g[c]),(u=!u&&p.implementation&&p.implementation.hasFeature&&!0!==p.implementation.hasFeature("","")?p.implementation.hasFeature("Events.wheel","3.0"):u)?"wheel":"mousewheel"),normalize:function(e){var t=0,a=0,i=0,s=0;return"detail"in e&&(a=e.detail),"wheelDelta"in e&&(a=-e.wheelDelta/120),"wheelDeltaY"in e&&(a=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),i=10*t,s=10*a,"deltaY"in e&&(s=e.deltaY),((i="deltaX"in e?e.deltaX:i)||s)&&e.deltaMode&&(1===e.deltaMode?(i*=40,s*=40):(i*=800,s*=800)),{spinX:t=i&&!t?i<1?-1:1:t,spinY:a=s&&!a?s<1?-1:1:a,pixelX:i,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,a=this,i=a.params.mousewheel;if(!a.mouseEntered&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var s=0,n=a.rtlTranslate?-1:1,o=z.normalize(t);if(i.forceToAxis)if(a.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;s=o.pixelX*n}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;s=o.pixelY}else s=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*n:-o.pixelY;if(0===s)return!0;if(i.invert&&(s=-s),a.params.freeMode){a.params.loop&&a.loopFix();e=a.getTranslate()+s*i.sensitivity,n=a.isBeginning,o=a.isEnd;if((e=e>=a.minTranslate()?a.minTranslate():e)<=a.maxTranslate()&&(e=a.maxTranslate()),a.setTransition(0),a.setTranslate(e),a.updateProgress(),a.updateActiveIndex(),a.updateSlidesClasses(),(!n&&a.isBeginning||!o&&a.isEnd)&&a.updateSlidesClasses(),a.params.freeModeSticky&&(clearTimeout(a.mousewheel.timeout),a.mousewheel.timeout=G.nextTick(function(){a.slideToClosest()},300)),a.emit("scroll",t),a.params.autoplay&&a.params.autoplayDisableOnInteraction&&a.autoplay.stop(),e===a.minTranslate()||e===a.maxTranslate())return!0}else{if(60<G.now()-a.mousewheel.lastScrollTime)if(s<0)if(a.isEnd&&!a.params.loop||a.animating){if(i.releaseOnEdges)return!0}else a.slideNext(),a.emit("scroll",t);else if(a.isBeginning&&!a.params.loop||a.animating){if(i.releaseOnEdges)return!0}else a.slidePrev(),a.emit("scroll",t);a.mousewheel.lastScrollTime=(new N.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var e=this;if(!z.event)return!1;if(e.mousewheel.enabled)return!1;var t=e.$el;return(t="container"!==e.params.mousewheel.eventsTarged?S(e.params.mousewheel.eventsTarged):t).on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(z.event,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=this;if(!z.event)return!1;if(!e.mousewheel.enabled)return!1;var t=e.$el;return(t="container"!==e.params.mousewheel.eventsTarged?S(e.params.mousewheel.eventsTarged):t).off(z.event,e.mousewheel.handle),!(e.mousewheel.enabled=!1)}},I={update:function(){var e,t,a=this,i=a.params.navigation;a.params.loop||(e=(t=a.navigation).$nextEl,(t=t.$prevEl)&&0<t.length&&(a.isBeginning?t.addClass(i.disabledClass):t.removeClass(i.disabledClass),t[a.params.watchOverflow&&a.isLocked?"addClass":"removeClass"](i.lockClass)),e&&0<e.length&&(a.isEnd?e.addClass(i.disabledClass):e.removeClass(i.disabledClass),e[a.params.watchOverflow&&a.isLocked?"addClass":"removeClass"](i.lockClass)))},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,a=this,i=a.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=S(i.nextEl),a.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===a.$el.find(i.nextEl).length&&(e=a.$el.find(i.nextEl))),i.prevEl&&(t=S(i.prevEl),a.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===a.$el.find(i.prevEl).length&&(t=a.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",a.navigation.onNextClick),t&&0<t.length&&t.on("click",a.navigation.onPrevClick),G.extend(a.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,a=t.$nextEl,t=t.$prevEl;a&&a.length&&(a.off("click",e.navigation.onNextClick),a.removeClass(e.params.navigation.disabledClass)),t&&t.length&&(t.off("click",e.navigation.onPrevClick),t.removeClass(e.params.navigation.disabledClass))}},L={update:function(){var e=this,t=e.rtl,i=e.params.pagination;if(i.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var s,a=(e.virtual&&e.params.virtual.enabled?e.virtual:e).slides.length,n=e.pagination.$el,o=e.params.loop?Math.ceil((a-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((s=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>a-1-2*e.loopedSlides&&(s-=a-2*e.loopedSlides),o-1<s&&(s-=o),s<0&&"bullets"!==e.params.paginationType&&(s=o+s)):s=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var r,l,d,c,p,u=e.pagination.bullets;if(i.dynamicBullets&&(e.pagination.bulletSize=u.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),n.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),1<i.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=s-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),r=s-e.pagination.dynamicBulletIndex,d=((l=r+(Math.min(u.length,i.dynamicMainBullets)-1))+r)/2),u.removeClass(i.bulletActiveClass+" "+i.bulletActiveClass+"-next "+i.bulletActiveClass+"-next-next "+i.bulletActiveClass+"-prev "+i.bulletActiveClass+"-prev-prev "+i.bulletActiveClass+"-main"),1<n.length)u.each(function(e,t){var a=S(t),t=a.index();t===s&&a.addClass(i.bulletActiveClass),i.dynamicBullets&&(r<=t&&t<=l&&a.addClass(i.bulletActiveClass+"-main"),t===r&&a.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),t===l&&a.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))});else if(u.eq(s).addClass(i.bulletActiveClass),i.dynamicBullets){for(var h=u.eq(r),a=u.eq(l),f=r;f<=l;f+=1)u.eq(f).addClass(i.bulletActiveClass+"-main");h.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),a.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}i.dynamicBullets&&(p=Math.min(u.length,i.dynamicMainBullets+4),c=(e.pagination.bulletSize*p-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,p=t?"right":"left",u.css(e.isHorizontal()?p:"top",c+"px"))}"fraction"===i.type&&(n.find("."+i.currentClass).text(i.formatFractionCurrent(s+1)),n.find("."+i.totalClass).text(i.formatFractionTotal(o))),"progressbar"===i.type&&(d=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical",t=(s+1)/o,c=p=1,"horizontal"===d?p=t:c=t,n.find("."+i.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+p+") scaleY("+c+")").transition(e.params.speed)),"custom"===i.type&&i.renderCustom?(n.html(i.renderCustom(e,s+1,o)),e.emit("paginationRender",e,n[0])):e.emit("paginationUpdate",e,n[0]),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=(e.virtual&&e.params.virtual.enabled?e.virtual:e).slides.length,i=e.pagination.$el,s="";if("bullets"===t.type){for(var n=e.params.loop?Math.ceil((a-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,o=0;o<n;o+=1)t.renderBullet?s+=t.renderBullet.call(e,o,t.bulletClass):s+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";i.html(s),e.pagination.bullets=i.find("."+t.bulletClass)}"fraction"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',i.html(s)),"progressbar"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',i.html(s)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e,t=this,a=t.params.pagination;!a.el||0!==(e=S(a.el)).length&&(t.params.uniqueNavElements&&"string"==typeof a.el&&1<e.length&&1===t.$el.find(a.el).length&&(e=t.$el.find(a.el)),"bullets"===a.type&&a.clickable&&e.addClass(a.clickableClass),e.addClass(a.modifierClass+a.type),"bullets"===a.type&&a.dynamicBullets&&(e.addClass(""+a.modifierClass+a.type+"-dynamic"),t.pagination.dynamicBulletIndex=0,a.dynamicMainBullets<1&&(a.dynamicMainBullets=1)),"progressbar"===a.type&&a.progressbarOpposite&&e.addClass(a.progressbarOppositeClass),a.clickable&&e.on("click","."+a.bulletClass,function(e){e.preventDefault();e=S(this).index()*t.params.slidesPerGroup;t.params.loop&&(e+=t.loopedSlides),t.slideTo(e)}),G.extend(t.pagination,{$el:e,el:e[0]}))},destroy:function(){var e,t=this,a=t.params.pagination;a.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length&&((e=t.pagination.$el).removeClass(a.hiddenClass),e.removeClass(a.modifierClass+a.type),t.pagination.bullets&&t.pagination.bullets.removeClass(a.bulletActiveClass),a.clickable&&e.off("click","."+a.bulletClass))}},D={setTranslate:function(){var e,t,a,i,s,n,o,r,l=this;l.params.scrollbar.el&&l.scrollbar.el&&(o=l.scrollbar,e=l.rtlTranslate,r=l.progress,t=o.dragSize,a=o.trackSize,i=o.$dragEl,s=o.$el,n=l.params.scrollbar,r=(a-(o=t))*r,e?0<(r=-r)?(o=t-r,r=0):a<-r+t&&(o=a+r):r<0?(o=t+r,r=0):a<r+t&&(o=a-r),l.isHorizontal()?(q.transforms3d?i.transform("translate3d("+r+"px, 0, 0)"):i.transform("translateX("+r+"px)"),i[0].style.width=o+"px"):(q.transforms3d?i.transform("translate3d(0px, "+r+"px, 0)"):i.transform("translateY("+r+"px)"),i[0].style.height=o+"px"),n.hide&&(clearTimeout(l.scrollbar.timeout),s[0].style.opacity=1,l.scrollbar.timeout=setTimeout(function(){s[0].style.opacity=0,s.transition(400)},1e3)))},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e,t,a,i,s,n,o,r=this;r.params.scrollbar.el&&r.scrollbar.el&&(t=(e=r.scrollbar).$dragEl,a=e.$el,t[0].style.width="",t[0].style.height="",i=r.isHorizontal()?a[0].offsetWidth:a[0].offsetHeight,n=(s=r.size/r.virtualSize)*(i/r.size),o="auto"===r.params.scrollbar.dragSize?i*s:parseInt(r.params.scrollbar.dragSize,10),r.isHorizontal()?t[0].style.width=o+"px":t[0].style.height=o+"px",a[0].style.display=1<=s?"none":"",r.params.scrollbar.hide&&(a[0].style.opacity=0),G.extend(e,{trackSize:i,divider:s,moveDivider:n,dragSize:o}),e.$el[r.params.watchOverflow&&r.isLocked?"addClass":"removeClass"](r.params.scrollbar.lockClass))},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY},setDragPosition:function(e){var t=this,a=t.scrollbar,i=t.rtlTranslate,s=a.$el,n=a.dragSize,o=a.trackSize,r=a.dragStartPos,n=(a.getPointerPosition(e)-s.offset()[t.isHorizontal()?"left":"top"]-(null!==r?r:n/2))/(o-n);n=Math.max(Math.min(n,1),0),i&&(n=1-n);n=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*n;t.updateProgress(n),t.setTranslate(n),t.updateActiveIndex(),t.updateSlidesClasses()},onDragStart:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,n=i.$el,o=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===o[0]||e.target===o?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),o.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),n.transition(0),a.hide&&n.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,a=this.$wrapperEl,i=t.$el,s=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),a.transition(0),i.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,a.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=G.nextTick(function(){i.css("opacity",0),i.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),a.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e,t,a,i,s,n=this;n.params.scrollbar.el&&(i=n.scrollbar,e=n.touchEventsTouch,t=n.touchEventsDesktop,s=n.params,a=i.$el[0],i=!(!q.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},s=!(!q.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1},q.touch?(a.addEventListener(e.start,n.scrollbar.onDragStart,i),a.addEventListener(e.move,n.scrollbar.onDragMove,i),a.addEventListener(e.end,n.scrollbar.onDragEnd,s)):(a.addEventListener(t.start,n.scrollbar.onDragStart,i),p.addEventListener(t.move,n.scrollbar.onDragMove,i),p.addEventListener(t.end,n.scrollbar.onDragEnd,s)))},disableDraggable:function(){var e,t,a,i,s,n=this;n.params.scrollbar.el&&(i=n.scrollbar,e=n.touchEventsTouch,t=n.touchEventsDesktop,s=n.params,a=i.$el[0],i=!(!q.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},s=!(!q.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1},q.touch?(a.removeEventListener(e.start,n.scrollbar.onDragStart,i),a.removeEventListener(e.move,n.scrollbar.onDragMove,i),a.removeEventListener(e.end,n.scrollbar.onDragEnd,s)):(a.removeEventListener(t.start,n.scrollbar.onDragStart,i),p.removeEventListener(t.move,n.scrollbar.onDragMove,i),p.removeEventListener(t.end,n.scrollbar.onDragEnd,s)))},init:function(){var e,t,a,i,s=this;s.params.scrollbar.el&&(e=s.scrollbar,i=s.$el,a=S((t=s.params.scrollbar).el),0===(i=(a=s.params.uniqueNavElements&&"string"==typeof t.el&&1<a.length&&1===i.find(t.el).length?i.find(t.el):a).find("."+s.params.scrollbar.dragClass)).length&&(i=S('<div class="'+s.params.scrollbar.dragClass+'"></div>'),a.append(i)),G.extend(e,{$el:a,el:a[0],$dragEl:i,dragEl:i[0]}),t.draggable&&e.enableDraggable())},destroy:function(){this.scrollbar.disableDraggable()}},A={setTransform:function(e,t){var a=this.rtl,i=S(e),s=a?-1:1,n=i.attr("data-swiper-parallax")||"0",o=i.attr("data-swiper-parallax-x"),r=i.attr("data-swiper-parallax-y"),e=i.attr("data-swiper-parallax-scale"),a=i.attr("data-swiper-parallax-opacity");o||r?(o=o||"0",r=r||"0"):this.isHorizontal()?(o=n,r="0"):(r=n,o="0"),o=0<=o.indexOf("%")?parseInt(o,10)*t*s+"%":o*t*s+"px",r=0<=r.indexOf("%")?parseInt(r,10)*t+"%":r*t+"px",null!=a&&(a=a-(a-1)*(1-Math.abs(t)),i[0].style.opacity=a),null==e?i.transform("translate3d("+o+", "+r+", 0px)"):(t=e-(e-1)*(1-Math.abs(t)),i.transform("translate3d("+o+", "+r+", 0px) scale("+t+")"))},setTranslate:function(){var i=this,e=i.$el,t=i.slides,s=i.progress,n=i.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){i.parallax.setTransform(t,s)}),t.each(function(e,t){var a=t.progress;1<i.params.slidesPerGroup&&"auto"!==i.params.slidesPerView&&(a+=Math.ceil(e/2)-s*(n.length-1)),a=Math.min(Math.max(a,-1),1),S(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){i.parallax.setTransform(t,a)})})},setTransition:function(i){void 0===i&&(i=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){var a=S(t),t=parseInt(a.attr("data-swiper-parallax-duration"),10)||i;0===i&&(t=0),a.transition(t)})}},O={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,e=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(e-a,2))},onGestureStart:function(e){var t=this,a=t.params.zoom,i=t.zoom,s=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!q.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,s.scaleStart=O.getDistanceBetweenTouches(e)}s.$slideEl&&s.$slideEl.length||(s.$slideEl=S(e.target).closest(".swiper-slide"),0===s.$slideEl.length&&(s.$slideEl=t.slides.eq(t.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas"),s.$imageWrapEl=s.$imageEl.parent("."+a.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||a.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl.transition(0),t.zoom.isScaling=!0):s.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,a=this.zoom,i=a.gesture;if(!q.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;a.fakeGestureMoved=!0,i.scaleMove=O.getDistanceBetweenTouches(e)}i.$imageEl&&0!==i.$imageEl.length&&(a.scale=q.gestures?e.scale*a.currentScale:i.scaleMove/i.scaleStart*a.currentScale,a.scale>i.maxRatio&&(a.scale=i.maxRatio-1+Math.pow(a.scale-i.maxRatio+1,.5)),a.scale<t.minRatio&&(a.scale=t.minRatio+1-Math.pow(t.minRatio-a.scale+1,.5)),i.$imageEl.transform("translate3d(0,0,0) scale("+a.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,a=this.zoom,i=a.gesture;if(!q.gestures){if(!a.fakeGestureTouched||!a.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!v.android)return;a.fakeGestureTouched=!1,a.fakeGestureMoved=!1}i.$imageEl&&0!==i.$imageEl.length&&(a.scale=Math.max(Math.min(a.scale,i.maxRatio),t.minRatio),i.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+a.scale+")"),a.currentScale=a.scale,a.isScaling=!1,1===a.scale&&(i.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,a=t.gesture,t=t.image;a.$imageEl&&0!==a.$imageEl.length&&(t.isTouched||(v.android&&e.preventDefault(),t.isTouched=!0,t.touchesStart.x=("touchstart"===e.type?e.targetTouches[0]:e).pageX,t.touchesStart.y=("touchstart"===e.type?e.targetTouches[0]:e).pageY))},onTouchMove:function(e){var t=this,a=t.zoom,i=a.gesture,s=a.image,n=a.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(t.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=G.getTranslate(i.$imageWrapEl[0],"x")||0,s.startY=G.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var o=s.width*a.scale,r=s.height*a.scale;if(!(o<i.slideWidth&&r<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-o/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-r/2,0),s.maxY=-s.minY,s.touchesCurrent.x=("touchmove"===e.type?e.targetTouches[0]:e).pageX,s.touchesCurrent.y=("touchmove"===e.type?e.targetTouches[0]:e).pageY,!s.isMoved&&!a.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),n.prevPositionX||(n.prevPositionX=s.touchesCurrent.x),n.prevPositionY||(n.prevPositionY=s.touchesCurrent.y),n.prevTime||(n.prevTime=Date.now()),n.x=(s.touchesCurrent.x-n.prevPositionX)/(Date.now()-n.prevTime)/2,n.y=(s.touchesCurrent.y-n.prevPositionY)/(Date.now()-n.prevTime)/2,Math.abs(s.touchesCurrent.x-n.prevPositionX)<2&&(n.x=0),Math.abs(s.touchesCurrent.y-n.prevPositionY)<2&&(n.y=0),n.prevPositionX=s.touchesCurrent.x,n.prevPositionY=s.touchesCurrent.y,n.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,a=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!a.isTouched||!a.isMoved)return a.isTouched=!1,void(a.isMoved=!1);a.isTouched=!1,a.isMoved=!1;var s=300,n=300,o=i.x*s,r=a.currentX+o,o=i.y*n,o=a.currentY+o;0!==i.x&&(s=Math.abs((r-a.currentX)/i.x)),0!==i.y&&(n=Math.abs((o-a.currentY)/i.y));n=Math.max(s,n);a.currentX=r,a.currentY=o;o=a.width*e.scale,e=a.height*e.scale;a.minX=Math.min(t.slideWidth/2-o/2,0),a.maxX=-a.minX,a.minY=Math.min(t.slideHeight/2-e/2,0),a.maxY=-a.minY,a.currentX=Math.max(Math.min(a.currentX,a.maxX),a.minX),a.currentY=Math.max(Math.min(a.currentY,a.maxY),a.minY),t.$imageWrapEl.transition(n).transform("translate3d("+a.currentX+"px, "+a.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,a,i,s=this,n=s.zoom,o=s.params.zoom,r=n.gesture,l=n.image;r.$slideEl||(r.$slideEl=s.clickedSlide?S(s.clickedSlide):s.slides.eq(s.activeIndex),r.$imageEl=r.$slideEl.find("img, svg, canvas"),r.$imageWrapEl=r.$imageEl.parent("."+o.containerClass)),r.$imageEl&&0!==r.$imageEl.length&&(r.$slideEl.addClass(""+o.zoomedSlideClass),l=void 0===l.touchesStart.x&&e?(i=("touchend"===e.type?e.changedTouches[0]:e).pageX,("touchend"===e.type?e.changedTouches[0]:e).pageY):(i=l.touchesStart.x,l.touchesStart.y),n.scale=r.$imageWrapEl.attr("data-swiper-zoom")||o.maxRatio,n.currentScale=r.$imageWrapEl.attr("data-swiper-zoom")||o.maxRatio,e?(o=r.$slideEl[0].offsetWidth,e=r.$slideEl[0].offsetHeight,t=r.$slideEl.offset().left+o/2-i,a=r.$slideEl.offset().top+e/2-l,i=r.$imageEl[0].offsetWidth,l=r.$imageEl[0].offsetHeight,i=i*n.scale,l=l*n.scale,i=Math.min(o/2-i/2,0),e=Math.min(e/2-l/2,0),(l=-i)<(t=(t=t*n.scale)<i?i:t)&&(t=l),(l=-e)<(a=(a=a*n.scale)<e?e:a)&&(a=l)):a=t=0,r.$imageWrapEl.transition(300).transform("translate3d("+t+"px, "+a+"px,0)"),r.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+n.scale+")"))},out:function(){var e=this,t=e.zoom,a=e.params.zoom,i=t.gesture;i.$slideEl||(i.$slideEl=e.clickedSlide?S(e.clickedSlide):e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas"),i.$imageWrapEl=i.$imageEl.parent("."+a.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+a.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e,t=this,a=t.zoom;a.enabled||(a.enabled=!0,e=!("touchstart"!==t.touchEvents.start||!q.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1},q.gestures?(t.$wrapperEl.on("gesturestart",".swiper-slide",a.onGestureStart,e),t.$wrapperEl.on("gesturechange",".swiper-slide",a.onGestureChange,e),t.$wrapperEl.on("gestureend",".swiper-slide",a.onGestureEnd,e)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.on(t.touchEvents.start,".swiper-slide",a.onGestureStart,e),t.$wrapperEl.on(t.touchEvents.move,".swiper-slide",a.onGestureChange,e),t.$wrapperEl.on(t.touchEvents.end,".swiper-slide",a.onGestureEnd,e)),t.$wrapperEl.on(t.touchEvents.move,"."+t.params.zoom.containerClass,a.onTouchMove))},disable:function(){var e,t=this,a=t.zoom;a.enabled&&(t.zoom.enabled=!1,e=!("touchstart"!==t.touchEvents.start||!q.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1},q.gestures?(t.$wrapperEl.off("gesturestart",".swiper-slide",a.onGestureStart,e),t.$wrapperEl.off("gesturechange",".swiper-slide",a.onGestureChange,e),t.$wrapperEl.off("gestureend",".swiper-slide",a.onGestureEnd,e)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.off(t.touchEvents.start,".swiper-slide",a.onGestureStart,e),t.$wrapperEl.off(t.touchEvents.move,".swiper-slide",a.onGestureChange,e),t.$wrapperEl.off(t.touchEvents.end,".swiper-slide",a.onGestureEnd,e)),t.$wrapperEl.off(t.touchEvents.move,"."+t.params.zoom.containerClass,a.onTouchMove))}},H={loadInSlide:function(e,r){void 0===r&&(r=!0);var l,d=this,c=d.params.lazy;void 0!==e&&0!==d.slides.length&&(e=(l=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e)).find("."+c.elementClass+":not(."+c.loadedClass+"):not(."+c.loadingClass+")"),0!==(e=l.hasClass(c.elementClass)&&!l.hasClass(c.loadedClass)&&!l.hasClass(c.loadingClass)?e.add(l[0]):e).length&&e.each(function(e,t){var a=S(t);a.addClass(c.loadingClass);var i=a.attr("data-background"),s=a.attr("data-src"),n=a.attr("data-srcset"),o=a.attr("data-sizes");d.loadImage(a[0],s||i,n,o,!1,function(){var e,t;null==d||!d||d&&!d.params||d.destroyed||(i?(a.css("background-image",'url("'+i+'")'),a.removeAttr("data-background")):(n&&(a.attr("srcset",n),a.removeAttr("data-srcset")),o&&(a.attr("sizes",o),a.removeAttr("data-sizes")),s&&(a.attr("src",s),a.removeAttr("data-src"))),a.addClass(c.loadedClass).removeClass(c.loadingClass),l.find("."+c.preloaderClass).remove(),d.params.loop&&r&&(t=l.attr("data-swiper-slide-index"),l.hasClass(d.params.slideDuplicateClass)?(e=d.$wrapperEl.children('[data-swiper-slide-index="'+t+'"]:not(.'+d.params.slideDuplicateClass+")"),d.lazy.loadInSlide(e.index(),!1)):(t=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+t+'"]'),d.lazy.loadInSlide(t.index(),!1))),d.emit("lazyImageReady",l[0],a[0]))}),d.emit("lazyImageLoad",l[0],a[0])}))},load:function(){var a=this,t=a.$wrapperEl,i=a.params,s=a.slides,e=a.activeIndex,n=a.virtual&&i.virtual.enabled,o=i.lazy,r=i.slidesPerView;function l(e){if(n){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(s[e])return 1}function d(e){return n?S(e).attr("data-swiper-slide-index"):S(e).index()}if("auto"===r&&(r=0),a.lazy.initialImageLoaded||(a.lazy.initialImageLoaded=!0),a.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e,t){t=n?S(t).attr("data-swiper-slide-index"):S(t).index();a.lazy.loadInSlide(t)});else if(1<r)for(var c=e;c<e+r;c+=1)l(c)&&a.lazy.loadInSlide(c);else a.lazy.loadInSlide(e);if(o.loadPrevNext)if(1<r||o.loadPrevNextAmount&&1<o.loadPrevNextAmount){for(var p=o.loadPrevNextAmount,o=r,u=Math.min(e+o+Math.max(p,o),s.length),p=Math.max(e-Math.max(o,p),0),h=e+r;h<u;h+=1)l(h)&&a.lazy.loadInSlide(h);for(var f=p;f<e;f+=1)l(f)&&a.lazy.loadInSlide(f)}else{p=t.children("."+i.slideNextClass);0<p.length&&a.lazy.loadInSlide(d(p));p=t.children("."+i.slidePrevClass);0<p.length&&a.lazy.loadInSlide(d(p))}}},F={LinearSpline:function(e,t){var a,i,s,n,o,r=function(e,t){for(i=-1,a=e.length;1<a-i;)e[s=a+i>>1]<=t?i=s:a=s;return a};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(o=r(this.x,e),n=o-1,(e-this.x[n])*(this.y[o]-this.y[n])/(this.x[o]-this.x[n])+this.y[n]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new F.LinearSpline(t.slidesGrid,e.slidesGrid):new F.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var a,i,s=this,n=s.controller.control;function o(e){var t=s.rtlTranslate?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),i=-s.controller.spline.interpolate(-t)),i&&"container"!==s.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),i=(t-s.minTranslate())*a+e.minTranslate()),s.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(n))for(var r=0;r<n.length;r+=1)n[r]!==t&&n[r]instanceof T&&o(n[r]);else n instanceof T&&t!==n&&o(n)},setTransition:function(t,e){var a,i=this,s=i.controller.control;function n(e){e.setTransition(t,i),0!==t&&(e.transitionStart(),e.params.autoHeight&&G.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){s&&(e.params.loop&&"slide"===i.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(a=0;a<s.length;a+=1)s[a]!==e&&s[a]instanceof T&&n(s[a]);else s instanceof T&&e!==s&&n(s)}},B={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,a=t.params.a11y;13===e.keyCode&&(e=S(e.target),t.navigation&&t.navigation.$nextEl&&e.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(a.lastSlideMessage):t.a11y.notify(a.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&e.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(a.firstSlideMessage):t.a11y.notify(a.prevSlideMessage)),t.pagination&&e.is("."+t.params.pagination.bulletClass)&&e[0].click())},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e,t,a=this;a.params.loop||(e=(t=a.navigation).$nextEl,(t=t.$prevEl)&&0<t.length&&(a.isBeginning?a.a11y.disableEl(t):a.a11y.enableEl(t)),e&&0<e.length&&(a.isEnd?a.a11y.disableEl(e):a.a11y.enableEl(e)))},updatePagination:function(){var a=this,i=a.params.a11y;a.pagination&&a.params.pagination.clickable&&a.pagination.bullets&&a.pagination.bullets.length&&a.pagination.bullets.each(function(e,t){t=S(t);a.a11y.makeElFocusable(t),a.a11y.addElRole(t,"button"),a.a11y.addElLabel(t,i.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,a,i=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(a=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,i.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),a&&(e.a11y.makeElFocusable(a),e.a11y.addElRole(a,"button"),e.a11y.addElLabel(a,i.prevSlideMessage),a.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e,t,a=this;a.a11y.liveRegion&&0<a.a11y.liveRegion.length&&a.a11y.liveRegion.remove(),a.navigation&&a.navigation.$nextEl&&(e=a.navigation.$nextEl),a.navigation&&a.navigation.$prevEl&&(t=a.navigation.$prevEl),e&&e.off("keydown",a.a11y.onEnterKey),t&&t.off("keydown",a.a11y.onEnterKey),a.pagination&&a.params.pagination.clickable&&a.pagination.bullets&&a.pagination.bullets.length&&a.pagination.$el.off("keydown","."+a.params.pagination.bulletClass,a.a11y.onEnterKey)}},X={init:function(){var e=this;if(e.params.history){if(!N.history||!N.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=X.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||N.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||N.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=X.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=N.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){this.history.initialized&&this.params.history.enabled&&(t=this.slides.eq(t),t=X.slugify(t.attr("data-history")),N.location.pathname.includes(e)||(t=e+"/"+t),(e=N.history.state)&&e.value===t||(this.params.history.replaceState?N.history.replaceState({value:t},null,t):N.history.pushState({value:t},null,t)))},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,a){var i=this;if(t)for(var s=0,n=i.slides.length;s<n;s+=1){var o=i.slides.eq(s);X.slugify(o.attr("data-history"))!==t||o.hasClass(i.params.slideDuplicateClass)||(o=o.index(),i.slideTo(o,e,a))}else i.slideTo(0,e,a)}},Y={onHashCange:function(){var e=this,t=p.location.hash.replace("#","");t===e.slides.eq(e.activeIndex).attr("data-hash")||void 0!==(t=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index())&&e.slideTo(t)},setHash:function(){var e=this;e.hashNavigation.initialized&&e.params.hashNavigation.enabled&&(e.params.hashNavigation.replaceState&&N.history&&N.history.replaceState?N.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""):(e=(e=e.slides.eq(e.activeIndex)).attr("data-hash")||e.attr("data-history"),p.location.hash=e||""))},init:function(){var e=this;if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var t=p.location.hash.replace("#","");if(t)for(var a=0,i=e.slides.length;a<i;a+=1){var s=e.slides.eq(a);(s.attr("data-hash")||s.attr("data-history"))!==t||s.hasClass(e.params.slideDuplicateClass)||(s=s.index(),e.slideTo(s,0,e.params.runCallbacksOnInit,!0))}e.params.hashNavigation.watchState&&S(N).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&S(N).off("hashchange",this.hashNavigation.onHashCange)}},V={run:function(){var e=this,t=e.slides.eq(e.activeIndex),a=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(a=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=G.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},a)},start:function(){var e=this;return void 0===e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}},R={setTranslate:function(){for(var e=this,t=e.slides,a=0;a<t.length;a+=1){var i=e.slides.eq(a),s=-i[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);var n=0;e.isHorizontal()||(n=s,s=0);var o=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:o}).transform("translate3d("+s+"px, "+n+"px, 0px)")}},setTransition:function(e){var a,i=this,t=i.slides,s=i.$wrapperEl;t.transition(e),i.params.virtualTranslate&&0!==e&&(a=!1,t.transitionEnd(function(){if(!a&&i&&!i.destroyed){a=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}}))}},W={setTranslate:function(){var e,t=this,a=t.$el,i=t.$wrapperEl,s=t.slides,n=t.width,o=t.height,r=t.rtlTranslate,l=t.size,d=t.params.cubeEffect,c=t.isHorizontal(),p=t.virtual&&t.params.virtual.enabled,u=0;d.shadow&&(c?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=S('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:n+"px"})):0===(e=a.find(".swiper-cube-shadow")).length&&(e=S('<div class="swiper-cube-shadow"></div>'),a.append(e)));for(var h,f=0;f<s.length;f+=1){var m=s.eq(f),g=f,v=90*(g=p?parseInt(m.attr("data-swiper-slide-index"),10):g),b=Math.floor(v/360);r&&(v=-v,b=Math.floor(-v/360));var y=Math.max(Math.min(m[0].progress,1),-1),x=0,w=0,T=0;g%4==0?(x=4*-b*l,T=0):(g-1)%4==0?(x=0,T=4*-b*l):(g-2)%4==0?(x=l+4*b*l,T=l):(g-3)%4==0&&(x=-l,T=3*l+4*l*b),r&&(x=-x),c||(w=x,x=0),y<=1&&-1<y&&(u=r?90*-g-90*y:90*g+90*y),m.transform("rotateX("+(c?0:-v)+"deg) rotateY("+(c?v:0)+"deg) translate3d("+x+"px, "+w+"px, "+T+"px)"),d.slideShadows&&(w=c?m.find(".swiper-slide-shadow-left"):m.find(".swiper-slide-shadow-top"),T=c?m.find(".swiper-slide-shadow-right"):m.find(".swiper-slide-shadow-bottom"),0===w.length&&(w=S('<div class="swiper-slide-shadow-'+(c?"left":"top")+'"></div>'),m.append(w)),0===T.length&&(T=S('<div class="swiper-slide-shadow-'+(c?"right":"bottom")+'"></div>'),m.append(T)),w.length&&(w[0].style.opacity=Math.max(-y,0)),T.length&&(T[0].style.opacity=Math.max(y,0)))}i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow&&(c?e.transform("translate3d(0px, "+(n/2+d.shadowOffset)+"px, "+-n/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")"):(h=Math.abs(u)-90*Math.floor(Math.abs(u)/90),a=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),n=d.shadowScale,h=d.shadowScale/a,a=d.shadowOffset,e.transform("scale3d("+n+", 1, "+h+") translate3d(0px, "+(o/2+a)+"px, "+-o/2/h+"px) rotateX(-90deg)"))),i.transform("translate3d(0px,0,"+(j.isSafari||j.isUiWebView?-l/2:0)+"px) rotateX("+(t.isHorizontal()?0:u)+"deg) rotateY("+(t.isHorizontal()?-u:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},_={setTranslate:function(){for(var e=this,t=e.slides,a=e.rtlTranslate,i=0;i<t.length;i+=1){var s,n,o=t.eq(i),r=o[0].progress,l=-180*(r=e.params.flipEffect.limitRotation?Math.max(Math.min(o[0].progress,1),-1):r),d=0,c=-o[0].swiperSlideOffset,p=0;e.isHorizontal()?a&&(l=-l):(p=c,d=-l,l=c=0),o[0].style.zIndex=-Math.abs(Math.round(r))+t.length,e.params.flipEffect.slideShadows&&(s=e.isHorizontal()?o.find(".swiper-slide-shadow-left"):o.find(".swiper-slide-shadow-top"),n=e.isHorizontal()?o.find(".swiper-slide-shadow-right"):o.find(".swiper-slide-shadow-bottom"),0===s.length&&(s=S('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),o.append(s)),0===n.length&&(n=S('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),o.append(n)),s.length&&(s[0].style.opacity=Math.max(-r,0)),n.length&&(n[0].style.opacity=Math.max(r,0))),o.transform("translate3d("+c+"px, "+p+"px, 0px) rotateX("+d+"deg) rotateY("+l+"deg)")}},setTransition:function(e){var a,i=this,t=i.slides,s=i.activeIndex,n=i.$wrapperEl;t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),i.params.virtualTranslate&&0!==e&&(a=!1,t.eq(s).transitionEnd(function(){if(!a&&i&&!i.destroyed){a=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)n.trigger(e[t])}}))}},U={setTranslate:function(){for(var e=this,t=e.width,a=e.height,i=e.slides,s=e.$wrapperEl,n=e.slidesSizesGrid,o=e.params.coverflowEffect,r=e.isHorizontal(),e=e.translate,l=r?t/2-e:a/2-e,d=r?o.rotate:-o.rotate,c=o.depth,p=0,u=i.length;p<u;p+=1){var h=i.eq(p),f=n[p],m=(l-h[0].swiperSlideOffset-f/2)/f*o.modifier,g=r?d*m:0,v=r?0:d*m,b=-c*Math.abs(m),y=r?0:o.stretch*m,f=r?o.stretch*m:0;Math.abs(f)<.001&&(f=0),Math.abs(y)<.001&&(y=0),Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(v)<.001&&(v=0),h.transform("translate3d("+f+"px,"+y+"px,"+b+"px)  rotateX("+v+"deg) rotateY("+g+"deg)"),h[0].style.zIndex=1-Math.abs(Math.round(m)),o.slideShadows&&(v=r?h.find(".swiper-slide-shadow-left"):h.find(".swiper-slide-shadow-top"),g=r?h.find(".swiper-slide-shadow-right"):h.find(".swiper-slide-shadow-bottom"),0===v.length&&(v=S('<div class="swiper-slide-shadow-'+(r?"left":"top")+'"></div>'),h.append(v)),0===g.length&&(g=S('<div class="swiper-slide-shadow-'+(r?"right":"bottom")+'"></div>'),h.append(g)),v.length&&(v[0].style.opacity=0<m?m:0),g.length&&(g[0].style.opacity=0<-m?-m:0))}(q.pointerEvents||q.prefixedPointerEvents)&&(s[0].style.perspectiveOrigin=l+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},K={init:function(){var e=this,t=e.params.thumbs,a=e.constructor;t.swiper instanceof a?(e.thumbs.swiper=t.swiper,G.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),G.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):G.isObject(t.swiper)&&(e.thumbs.swiper=new a(G.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick:function(){var e,t,a,i=this,s=i.thumbs.swiper;s&&(t=s.clickedIndex,(e=s.clickedSlide)&&S(e).hasClass(i.params.thumbs.slideThumbActiveClass)||null!=t&&(a=s.params.loop?parseInt(S(s.clickedSlide).attr("data-swiper-slide-index"),10):t,i.params.loop&&(e=i.activeIndex,i.slides.eq(e).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,e=i.activeIndex),s=i.slides.eq(e).prevAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),t=i.slides.eq(e).nextAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),a=void 0===s||void 0!==t&&t-e<e-s?t:s),i.slideTo(a)))},update:function(e){var t=this,a=t.thumbs.swiper;if(a){var i,s,n,o="auto"===a.params.slidesPerView?a.slidesPerViewDynamic():a.params.slidesPerView;t.realIndex!==a.realIndex&&(i=a.activeIndex,n=a.params.loop?(a.slides.eq(i).hasClass(a.params.slideDuplicateClass)&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,i=a.activeIndex),n=a.slides.eq(i).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),s=a.slides.eq(i).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),void 0===n?s:void 0===s?n:s-i==i-n?i:s-i<i-n?s:n):t.realIndex,a.visibleSlidesIndexes&&a.visibleSlidesIndexes.indexOf(n)<0&&(a.params.centeredSlides?n=i<n?n-Math.floor(o/2)+1:n+Math.floor(o/2)-1:i<n&&(n=n-o+1),a.slideTo(n,e?0:void 0)));var r=1,l=t.params.thumbs.slideThumbActiveClass;if(1<t.params.slidesPerView&&!t.params.centeredSlides&&(r=t.params.slidesPerView),a.slides.removeClass(l),a.params.loop||a.params.virtual)for(var d=0;d<r;d+=1)a.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+d)+'"]').addClass(l);else for(var c=0;c<r;c+=1)a.slides.eq(t.realIndex+c).addClass(l)}}},d=[C,E,$,s,o,r,d,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;G.extend(e,{mousewheel:{enabled:!1,enable:z.enable.bind(e),disable:z.disable.bind(e),handle:z.handle.bind(e),handleMouseEnter:z.handleMouseEnter.bind(e),handleMouseLeave:z.handleMouseLeave.bind(e),lastScrollTime:G.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){var e=this;G.extend(e,{navigation:{init:I.init.bind(e),update:I.update.bind(e),destroy:I.destroy.bind(e),onNextClick:I.onNextClick.bind(e),onPrevClick:I.onPrevClick.bind(e)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,a=this,i=a.navigation,s=i.$nextEl,i=i.$prevEl;!a.params.navigation.hideOnClick||S(e.target).is(i)||S(e.target).is(s)||(s?t=s.hasClass(a.params.navigation.hiddenClass):i&&(t=i.hasClass(a.params.navigation.hiddenClass)),!0===t?a.emit("navigationShow",a):a.emit("navigationHide",a),s&&s.toggleClass(a.params.navigation.hiddenClass),i&&i.toggleClass(a.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){var e=this;G.extend(e,{pagination:{init:L.init.bind(e),render:L.render.bind(e),update:L.update.bind(e),destroy:L.destroy.bind(e),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){var t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&0<t.pagination.$el.length&&!S(e.target).hasClass(t.params.pagination.bulletClass)&&(!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){var e=this;G.extend(e,{scrollbar:{init:D.init.bind(e),destroy:D.destroy.bind(e),updateSize:D.updateSize.bind(e),setTranslate:D.setTranslate.bind(e),setTransition:D.setTransition.bind(e),enableDraggable:D.enableDraggable.bind(e),disableDraggable:D.disableDraggable.bind(e),setDragPosition:D.setDragPosition.bind(e),getPointerPosition:D.getPointerPosition.bind(e),onDragStart:D.onDragStart.bind(e),onDragMove:D.onDragMove.bind(e),onDragEnd:D.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){G.extend(this,{parallax:{setTransform:A.setTransform.bind(this),setTranslate:A.setTranslate.bind(this),setTransition:A.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var i=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=O[e].bind(i)}),G.extend(i,{zoom:t});var s=1;Object.defineProperty(i.zoom,"scale",{get:function(){return s},set:function(e){var t,a;s!==e&&(t=i.zoom.gesture.$imageEl?i.zoom.gesture.$imageEl[0]:void 0,a=i.zoom.gesture.$slideEl?i.zoom.gesture.$slideEl[0]:void 0,i.emit("zoomChange",e,t,a)),s=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){G.extend(this,{lazy:{initialImageLoaded:!1,load:H.load.bind(this),loadInSlide:H.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(!e.params.lazy.loadOnTransitionStart&&(e.params.lazy.loadOnTransitionStart||e.lazy.initialImageLoaded)||e.lazy.load())},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){var e=this;G.extend(e,{controller:{control:e.params.controller.control,getInterpolateFunction:F.getInterpolateFunction.bind(e),setTranslate:F.setTranslate.bind(e),setTransition:F.setTransition.bind(e)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;G.extend(t,{a11y:{liveRegion:S('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(B).forEach(function(e){t.a11y[e]=B[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){var e=this;G.extend(e,{history:{init:X.init.bind(e),setHistory:X.setHistory.bind(e),setHistoryPopState:X.setHistoryPopState.bind(e),scrollToSlide:X.scrollToSlide.bind(e),destroy:X.destroy.bind(e)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){var e=this;G.extend(e,{hashNavigation:{initialized:!1,init:Y.init.bind(e),destroy:Y.destroy.bind(e),setHash:Y.setHash.bind(e),onHashCange:Y.onHashCange.bind(e)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;G.extend(t,{autoplay:{running:!1,paused:!1,run:V.run.bind(t),start:V.start.bind(t),stop:V.stop.bind(t),pause:V.pause.bind(t),onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){G.extend(this,{fadeEffect:{setTranslate:R.setTranslate.bind(this),setTransition:R.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"fade"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"fade"),G.extend(t.params,e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0}),G.extend(t.originalParams,e))},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){G.extend(this,{cubeEffect:{setTranslate:W.setTranslate.bind(this),setTransition:W.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"cube"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"cube"),t.classNames.push(t.params.containerModifierClass+"3d"),G.extend(t.params,e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0}),G.extend(t.originalParams,e))},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){G.extend(this,{flipEffect:{setTranslate:_.setTranslate.bind(this),setTransition:_.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"flip"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"flip"),t.classNames.push(t.params.containerModifierClass+"3d"),G.extend(t.params,e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0}),G.extend(t.originalParams,e))},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){G.extend(this,{coverflowEffect:{setTranslate:U.setTranslate.bind(this),setTransition:U.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){G.extend(this,{thumbs:{swiper:null,init:K.init.bind(this),update:K.update.bind(this),onThumbClick:K.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===T.use&&(T.use=T.Class.use,T.installModule=T.Class.installModule),T.use(d),T}),function(l,o,f,m){"use strict";var s,n,r,c,t,d,u,p,i,e,a,h,g;function v(e,t){var a,i,s,n=[],o=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},a=(t=e&&e.data?p(e.data.options,t):t).$target||f(e.currentTarget).trigger("blur"),(s=f.fancybox.getInstance())&&s.$trigger&&s.$trigger.is(a)||(n=t.selector?f(t.selector):(i=a.attr("data-fancybox")||"")?(n=e.data?e.data.items:[]).length?n.filter('[data-fancybox="'+i+'"]'):f('[data-fancybox="'+i+'"]'):[a],o=f(n).index(a),(s=f.fancybox.open(n,t,o=o<0?0:o)).$trigger=a))}l.console=l.console||{info:function(e){}},f&&(f.fn.fancybox?console.info("fancyBox already initialized"):(e={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:f.noop,beforeLoad:f.noop,afterLoad:f.noop,beforeShow:f.noop,afterShow:f.noop,beforeClose:f.noop,afterClose:f.noop,onActivate:f.noop,onDeactivate:f.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Maßstab"}}},s=f(l),n=f(o),r=0,c=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},t=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},d=function(){var e,t=o.createElement("fakeelement"),a={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in a)if(t.style[e]!==m)return a[e];return"transitionend"}(),u=function(e){return e&&e.length&&e[0].offsetHeight},p=function(e,t){var a=f.extend(!0,{},e,t);return f.each(t,function(e,t){f.isArray(t)&&(a[e]=t)}),a},f.extend((i=function(e,t,a){var i=this;i.opts=p({index:a},f.fancybox.defaults),f.isPlainObject(t)&&(i.opts=p(i.opts,t)),f.fancybox.isMobile&&(i.opts=p(i.opts,i.opts.mobile)),i.id=i.opts.id||++r,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(e),i.group.length&&i.init()}).prototype,{init:function(){var t,a,i=this,s=i.group[i.currIndex].opts;s.closeExisting&&f.fancybox.close(!0),f("body").addClass("fancybox-active"),!f.fancybox.getInstance()&&!1!==s.hideScrollbar&&!f.fancybox.isMobile&&o.body.scrollHeight>l.innerHeight&&(f("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-o.documentElement.clientWidth)+"px;}</style>"),f("body").addClass("compensate-for-scrollbar")),a="",f.each(s.buttons,function(e,t){a+=s.btnTpl[t]||""}),t=f(i.translate(i,s.baseTpl.replace("{{buttons}}",a).replace("{{arrows}}",s.btnTpl.arrowLeft+s.btnTpl.arrowRight))).attr("id","fancybox-container-"+i.id).addClass(s.baseClass).data("FancyBox",i).appendTo(s.parentEl),i.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){i.$refs[e]=t.find(".fancybox-"+e)}),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(e,t){var a=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){t=a[t];return t===m?e:t})},addContent:function(e){var r=this,e=f.makeArray(e);f.each(e,function(e,t){var a,i,s,n={},o={};f.isPlainObject(t)?o=(n=t).opts||t:"object"===f.type(t)&&f(t).length?(o=(i=f(t)).data()||{},(o=f.extend(!0,{},o,o.options)).$orig=i,n.src=r.opts.src||o.src||i.attr("href"),n.type||n.src||(n.type="inline",n.src=t)):n={type:"html",src:t+""},n.opts=f.extend(!0,{},r.opts,o),f.isArray(o.buttons)&&(n.opts.buttons=o.buttons),f.fancybox.isMobile&&n.opts.mobile&&(n.opts=p(n.opts,n.opts.mobile)),a=n.type||n.opts.type,i=n.src||"",!a&&i&&((o=i.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(a="video",n.opts.video.format||(n.opts.video.format="video/"+("ogv"===o[1]?"ogg":o[1]))):i.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?a="image":i.match(/\.(pdf)((\?|#).*)?$/i)?n=f.extend(!0,n,{contentType:"pdf",opts:{iframe:{preload:!(a="iframe")}}}):"#"===i.charAt(0)&&(a="inline")),a?n.type=a:r.trigger("objectNeedsType",n),n.contentType||(n.contentType=-1<f.inArray(n.type,["html","inline","ajax"])?"html":n.type),n.index=r.group.length,"auto"==n.opts.smallBtn&&(n.opts.smallBtn=-1<f.inArray(n.type,["html","inline","ajax"])),"auto"===n.opts.toolbar&&(n.opts.toolbar=!n.opts.smallBtn),n.$thumb=n.opts.$thumb||null,n.opts.$trigger&&n.index===r.opts.index&&(n.$thumb=n.opts.$trigger.find("img:first"),n.$thumb.length&&(n.opts.$orig=n.opts.$trigger)),n.$thumb&&n.$thumb.length||!n.opts.$orig||(n.$thumb=n.opts.$orig.find("img:first")),n.$thumb&&!n.$thumb.length&&(n.$thumb=null),n.thumb=n.opts.thumb||(n.$thumb?n.$thumb[0].src:null),"function"===f.type(n.opts.caption)&&(n.opts.caption=n.opts.caption.apply(t,[r,n])),"function"===f.type(r.opts.caption)&&(n.opts.caption=r.opts.caption.apply(t,[r,n])),n.opts.caption instanceof f||(n.opts.caption=n.opts.caption===m?"":n.opts.caption+""),"ajax"===n.type&&1<(s=i.split(/\s+/,2)).length&&(n.src=s.shift(),n.opts.filter=s.shift()),n.opts.modal&&(n.opts=f.extend(!0,n.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),r.group.push(n)}),Object.keys(r.slides).length&&(r.updateControls(),(e=r.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(i.requestId&&t(i.requestId),i.requestId=c(function(){i.update(e)})):(i.current&&"iframe"===i.current.type&&i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update(e)},f.fancybox.isMobile?600:250))}),n.on("keydown.fb",function(e){var t=(f.fancybox?f.fancybox.getInstance():null).current,a=e.keyCode||e.which;if(9!=a){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||f(e.target).is("input")||f(e.target).is("textarea")))return 8===a||27===a?(e.preventDefault(),void i.close(e)):37===a||38===a?(e.preventDefault(),void i.previous()):39===a||40===a?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,a)}else t.opts.trapFocus&&i.focus(e)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,n.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=l.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){s.off("orientationchange.fb resize.fb"),n.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,i){var t,a,s,n,o,r,l,d,c=this,p=c.group.length;if(!(c.isDragging||c.isClosing||c.isAnimating&&c.firstRun))return e=parseInt(e,10),!(!(a=(c.current||c).opts.loop)&&(e<0||p<=e))&&(t=c.firstRun=!Object.keys(c.slides).length,n=c.current,c.prevIndex=c.currIndex,c.prevPos=c.currPos,s=c.createSlide(e),1<p&&((a||s.index<p-1)&&c.createSlide(e+1),(a||0<s.index)&&c.createSlide(e-1)),c.current=s,c.currIndex=s.index,c.currPos=s.pos,c.trigger("beforeShow",t),c.updateControls(),s.forcedDuration=m,f.isNumeric(i)?s.forcedDuration=i:i=s.opts[t?"animationDuration":"transitionDuration"],i=parseInt(i,10),e=c.isMoved(s),s.$slide.addClass("fancybox-slide--current"),t?(s.opts.animationEffect&&i&&c.$refs.container.css("transition-duration",i+"ms"),c.$refs.container.addClass("fancybox-is-open").trigger("focus"),c.loadSlide(s)):(o=f.fancybox.getTranslate(n.$slide),r=f.fancybox.getTranslate(c.$refs.stage),f.each(c.slides,function(e,t){f.fancybox.stop(t.$slide,!0)}),n.pos!==s.pos&&(n.isComplete=!1),n.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),e?(d=o.left-(n.pos*o.width+n.pos*n.opts.gutter),f.each(c.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var a=t.pos*o.width+t.pos*t.opts.gutter;f.fancybox.setTranslate(t.$slide,{top:0,left:a-r.left+d}),t.pos!==s.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>s.pos?"next":"previous")),u(t.$slide),f.fancybox.animate(t.$slide,{top:0,left:(t.pos-s.pos)*o.width+(t.pos-s.pos)*t.opts.gutter},i,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===c.currPos&&c.complete()})})):i&&s.opts.transitionEffect&&(l="fancybox-animated fancybox-fx-"+s.opts.transitionEffect,n.$slide.addClass("fancybox-slide--"+(n.pos>s.pos?"next":"previous")),f.fancybox.animate(n.$slide,l,i,function(){n.$slide.removeClass(l).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),s.isLoaded?c.revealContent(s):c.loadSlide(s)),void c.preload("image"))},createSlide:function(e){var t,a=this,i=e%a.group.length;return i=i<0?a.group.length+i:i,!a.slides[e]&&a.group[i]&&(t=f('<div class="fancybox-slide"></div>').appendTo(a.$refs.stage),a.slides[e]=f.extend(!0,{},a.group[i],{pos:e,$slide:t,isLoaded:!1}),a.updateSlide(a.slides[e])),a.slides[e]},scaleToActual:function(e,t,a){var i,s,n,o,r=this,l=r.current,d=l.$content,c=f.fancybox.getTranslate(l.$slide).width,p=f.fancybox.getTranslate(l.$slide).height,u=l.width,h=l.height;r.isAnimating||r.isMoved()||!d||"image"!=l.type||!l.isLoaded||l.hasError||(r.isAnimating=!0,f.fancybox.stop(d),e=e===m?.5*c:e,t=t===m?.5*p:t,(i=f.fancybox.getTranslate(d)).top-=f.fancybox.getTranslate(l.$slide).top,i.left-=f.fancybox.getTranslate(l.$slide).left,n=u/i.width,o=h/i.height,s=.5*c-.5*u,l=.5*p-.5*h,c<u&&(s=0<(s=i.left*n-(e*n-e))?0:s)<c-u&&(s=c-u),p<h&&(l=0<(l=i.top*o-(t*o-t))?0:l)<p-h&&(l=p-h),r.updateCursor(u,h),f.fancybox.animate(d,{top:l,left:s,scaleX:n,scaleY:o},a||330,function(){r.isAnimating=!1}),r.SlideShow&&r.SlideShow.isActive&&r.SlideShow.stop())},scaleToFit:function(e){var t=this,a=t.current,i=a.$content;t.isAnimating||t.isMoved()||!i||"image"!=a.type||!a.isLoaded||a.hasError||(t.isAnimating=!0,f.fancybox.stop(i),a=t.getFitPos(a),t.updateCursor(a.width,a.height),f.fancybox.animate(i,{top:a.top,left:a.left,scaleX:a.width/i.width(),scaleY:a.height/i.height()},e||330,function(){t.isAnimating=!1}))},getFitPos:function(e){var t,a,i=e.$content,s=e.$slide,n=e.width||e.opts.width,o=e.height||e.opts.height,r={};return!!(e.isLoaded&&i&&i.length)&&(t=f.fancybox.getTranslate(this.$refs.stage).width,a=f.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(s.css("paddingLeft"))+parseFloat(s.css("paddingRight"))+parseFloat(i.css("marginLeft"))+parseFloat(i.css("marginRight")),a-=parseFloat(s.css("paddingTop"))+parseFloat(s.css("paddingBottom"))+parseFloat(i.css("marginTop"))+parseFloat(i.css("marginBottom")),n&&o||(n=t,o=a),t-.5<(n*=i=Math.min(1,t/n,a/o))&&(n=t),a-.5<(o*=i)&&(o=a),"image"===e.type?(r.top=Math.floor(.5*(a-o))+parseFloat(s.css("paddingTop")),r.left=Math.floor(.5*(t-n))+parseFloat(s.css("paddingLeft"))):"video"===e.contentType&&(n/(e=e.opts.width&&e.opts.height?n/o:e.opts.ratio||16/9)<o?o=n/e:o*e<n&&(n=o*e)),r.width=n,r.height=o,r)},update:function(a){var i=this;f.each(i.slides,function(e,t){i.updateSlide(t,a)})},updateSlide:function(e,t){var a=this,i=e&&e.$content,s=e.width||e.opts.width,n=e.height||e.opts.height,o=e.$slide;a.adjustCaption(e),i&&(s||n||"video"===e.contentType)&&!e.hasError&&(f.fancybox.stop(i),f.fancybox.setTranslate(i,a.getFitPos(e)),e.pos===a.currPos&&(a.isAnimating=!1,a.updateCursor())),a.adjustLayout(e),o.length&&(o.trigger("refresh"),e.pos===a.currPos&&a.$refs.toolbar.add(a.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",o.get(0).scrollHeight>o.get(0).clientHeight)),a.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,a=t.current,i=a.$slide;!t.isClosing&&a&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),f.fancybox.animate(i,{top:0,left:0,opacity:1},e===m?0:e,function(){i.css({transform:"",opacity:""}),a.isComplete||t.complete()},!1))},isMoved:function(e){var t,a=e||this.current;return!!a&&(t=f.fancybox.getTranslate(this.$refs.stage),e=f.fancybox.getTranslate(a.$slide),!a.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(e.top-t.top)||.5<Math.abs(e.left-t.left)))},updateCursor:function(e,t){var a=this,i=a.current,s=a.$refs.container;i&&!a.isClosing&&a.Guestures&&(s.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),t=!!(e=a.canPan(e,t))||a.isZoomable(),s.toggleClass("fancybox-is-zoomable",t),f("[data-fancybox-zoom]").prop("disabled",!t),e?s.addClass("fancybox-can-pan"):t&&("zoom"===i.opts.clickContent||f.isFunction(i.opts.clickContent)&&"zoom"==i.opts.clickContent(i))?s.addClass("fancybox-can-zoomIn"):i.opts.touch&&(i.opts.touch.vertical||1<a.group.length)&&"video"!==i.contentType&&s.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var a=!1,i=this.current,s=i.$content;return e!==m&&t!==m?a=e<i.width&&t<i.height:s&&(a=(a=f.fancybox.getTranslate(s)).width<i.width&&a.height<i.height),a},canPan:function(e,t){var a=this.current,i=null,s=!1;return"image"===a.type&&(a.isComplete||e&&t)&&!a.hasError&&(s=this.getFitPos(a),e!==m&&t!==m?i={width:e,height:t}:a.isComplete&&(i=f.fancybox.getTranslate(a.$content)),i&&s&&(s=1.5<Math.abs(i.width-s.width)||1.5<Math.abs(i.height-s.height))),s},loadSlide:function(a){var e,t,i,s=this;if(!a.isLoading&&!a.isLoaded){if(!(a.isLoading=!0)===s.trigger("beforeLoad",a))return a.isLoading=!1;switch(e=a.type,(t=a.$slide).off("refresh").trigger("onReset").addClass(a.opts.slideClass),e){case"image":s.setImage(a);break;case"iframe":s.setIframe(a);break;case"html":s.setContent(a,a.src||a.content);break;case"video":s.setContent(a,a.opts.video.tpl.replace(/\{\{src\}\}/gi,a.src).replace("{{format}}",a.opts.videoFormat||a.opts.video.format||"").replace("{{poster}}",a.thumb||""));break;case"inline":f(a.src).length?s.setContent(a,f(a.src)):s.setError(a);break;case"ajax":s.showLoading(a),i=f.ajax(f.extend({},a.opts.ajax.settings,{url:a.src,success:function(e,t){"success"===t&&s.setContent(a,e)},error:function(e,t){e&&"abort"!==t&&s.setError(a)}})),t.one("onReset",function(){i.abort()});break;default:s.setError(a)}return!0}},setImage:function(t){var e,a=this;setTimeout(function(){var e=t.$image;a.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||a.showLoading(t)},50),a.checkSrcset(t),t.$content=f('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=o.createElement("img")).onerror=function(){f(this).remove(),t.$ghost=null},e.onload=function(){a.afterLoad(t)},t.$ghost=f(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),a.setBigImage(t)},checkSrcset:function(e){var t,a,i,s,n=e.opts.srcset||e.opts.image.srcset;if(n){i=l.devicePixelRatio||1,s=l.innerWidth*i,(a=n.split(",").map(function(e){var i={};return e.trim().split(/\s+/).forEach(function(e,t){var a=parseInt(e.substring(0,e.length-1),10);if(0===t)return i.url=e;a&&(i.value=a,i.postfix=e[e.length-1])}),i})).sort(function(e,t){return e.value-t.value});for(var o=0;o<a.length;o++){var r=a[o];if("w"===r.postfix&&r.value>=s||"x"===r.postfix&&r.value>=i){t=r;break}}(t=!t&&a.length?a[a.length-1]:t)&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=n)}},setBigImage:function(t){var a=this,e=o.createElement("img"),i=f(e);t.$image=i.one("error",function(){a.setError(t)}).one("load",function(){var e;t.$ghost||(a.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),a.afterLoad(t)),a.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<s.width()/s.height()?"100":Math.round(t.width/t.height*100))+"vw"),i.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!a.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),a.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&i.naturalWidth&&i.naturalHeight?i.trigger("load"):e.error&&i.trigger("error")},resolveImageSlideSize:function(e,t,a){var i=parseInt(e.opts.width,10),s=parseInt(e.opts.height,10);e.width=t,e.height=a,0<i&&(e.width=i,e.height=Math.floor(i*a/t)),0<s&&(e.width=Math.floor(s*t/a),e.height=s)},setIframe:function(s){var n,t=this,o=s.opts.iframe,r=s.$slide;f.fancybox.isMobile&&(o.css.overflow="scroll"),s.$content=f('<div class="fancybox-content'+(o.preload?" fancybox-is-hidden":"")+'"></div>').css(o.css).appendTo(r),r.addClass("fancybox-slide--"+s.contentType),s.$iframe=n=f(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(o.attr).appendTo(s.$content),o.preload?(t.showLoading(s),n.on("load.fb error.fb",function(e){this.isReady=1,s.$slide.trigger("refresh"),t.afterLoad(s)}),r.on("refresh.fb",function(){var e,t=s.$content,a=o.css.width,i=o.css.height;if(1===n[0].isReady){try{e=n.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(r.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),a===m&&(a=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",a||"").css("max-width",""),i===m&&(i=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",i||""),r.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(s),n.attr("src",s.src),r.one("onReset",function(){try{f(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}f(this).off("refresh.fb").empty(),s.isLoaded=!1,s.isRevealed=!1})},setContent:function(e,t){var a;this.isClosing||(this.hideLoading(e),e.$content&&f.fancybox.stop(e.$content),e.$slide.empty(),(a=t)&&a.hasOwnProperty&&a instanceof f&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=f("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===f.type(t)&&(t=f("<div>").append(f.trim(t)).contents()),e.opts.filter&&(t=f("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){f(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(f(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),f(t).appendTo(e.$slide),f(t).is("video,audio")&&(f(t).addClass("fancybox-video"),f(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||f(t).attr("width"),e.opts.height=e.opts.height||f(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=f(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=f(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&f('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t=this,a=e||t.current,i=a.opts.caption,s=t.$refs.caption,e=!1;a.opts.preventCaptionOverlap&&i&&i.length&&(a.pos!==t.currPos?((s=s.clone().empty().appendTo(s.parent())).html(i),e=s.outerHeight(!0),s.empty().remove()):t.$caption&&(e=t.$caption.outerHeight(!0)),a.$slide.css("padding-bottom",e||""))},adjustLayout:function(e){var t,a,i,s=e||this.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css("margin-bottom",""),s.$content.outerHeight()>s.$slide.height()+.5&&(a=s.$slide[0].style["padding-bottom"],i=s.$slide.css("padding-bottom"),0<parseFloat(i)&&(e=s.$slide[0].scrollHeight,s.$slide.css("padding-bottom",0),Math.abs(e-s.$slide[0].scrollHeight)<1&&(t=i),s.$slide.css("padding-bottom",a))),s.$content.css("margin-bottom",t))},revealContent:function(e){var t,a,i,s,n=this,o=e.$slide,r=!1,l=!1,d=n.isMoved(e),c=e.isRevealed;return e.isRevealed=!0,t=e.opts[n.firstRun?"animationEffect":"transitionEffect"],i=e.opts[n.firstRun?"animationDuration":"transitionDuration"],i=parseInt(e.forcedDuration===m?i:e.forcedDuration,10),"zoom"===(t=d||e.pos!==n.currPos||!i?!1:t)&&(e.pos===n.currPos&&i&&"image"===e.type&&!e.hasError&&(l=n.getThumbPos(e))?r=n.getFitPos(e):t="fade"),"zoom"===t?(n.isAnimating=!0,r.scaleX=r.width/l.width,r.scaleY=r.height/l.height,(s="auto"==(s=e.opts.zoomOpacity)?.1<Math.abs(e.width/e.height-l.width/l.height):s)&&(l.opacity=.1,r.opacity=1),f.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),u(e.$content),void f.fancybox.animate(e.$content,r,i,function(){n.isAnimating=!1,n.complete()})):(n.updateSlide(e),t?(f.fancybox.stop(o),a="fancybox-slide--"+(e.pos>=n.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,o.addClass(a).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),u(o),"image"!==e.type&&e.$content.hide().show(0),void f.fancybox.animate(o,"fancybox-slide--current",i,function(){o.removeClass(a).css({transform:"",opacity:""}),e.pos===n.currPos&&n.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),c||!d||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===n.currPos&&n.complete())))},getThumbPos:function(e){var t,a,i,s=e.$thumb;return!!(s&&(a=s[0])&&a.ownerDocument===o&&(f(".fancybox-container").css("pointer-events","none"),i={x:a.getBoundingClientRect().left+a.offsetWidth/2,y:a.getBoundingClientRect().top+a.offsetHeight/2},a=o.elementFromPoint(i.x,i.y)===a,f(".fancybox-container").css("pointer-events",""),a))&&(t=f.fancybox.getTranslate(s),e=parseFloat(s.css("border-top-width")||0),i=parseFloat(s.css("border-right-width")||0),a=parseFloat(s.css("border-bottom-width")||0),s=parseFloat(s.css("border-left-width")||0),a={top:t.top+e,left:t.left+s,width:t.width-i-s,height:t.height-e-a,scaleX:1,scaleY:1},0<t.width&&0<t.height&&a)},complete:function(){var e,a=this,t=a.current,i={};!a.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),a.preload("inline"),u(t.$slide),t.$slide.addClass("fancybox-slide--complete"),f.each(a.slides,function(e,t){t.pos>=a.currPos-1&&t.pos<=a.currPos+1?i[t.pos]=t:t&&(f.fancybox.stop(t.$slide),t.$slide.off().remove())}),a.slides=i),a.isAnimating=!1,a.updateCursor(),a.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){this.webkitExitFullscreen&&this.webkitExitFullscreen(),a.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):a.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,a,i=this;i.group.length<2||(a=i.slides[i.currPos+1],(t=i.slides[i.currPos-1])&&t.type===e&&i.loadSlide(t),a&&a.type===e&&i.loadSlide(a))},focus:function(e,t){var a=this,i=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");a.isClosing||((t=(t=!e&&a.current&&a.current.isComplete?a.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):a.$refs.container.find("*:visible")).filter(i).filter(function(){return"hidden"!==f(this).css("visibility")&&!f(this).hasClass("disabled")})).length?(i=t.index(o.activeElement),e&&e.shiftKey?(i<0||0==i)&&(e.preventDefault(),t.eq(t.length-1).trigger("focus")):(i<0||i==t.length-1)&&(e&&e.preventDefault(),t.eq(0).trigger("focus"))):a.$refs.container.trigger("focus"))},activate:function(){var t=this;f(".fancybox-container").each(function(){var e=f(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function a(){l.cleanUp(e)}var i,s,n,o,r,l=this,d=l.current;return!l.isClosing&&(!(l.isClosing=!0)===l.trigger("beforeClose",e)?(l.isClosing=!1,c(function(){l.update()}),!1):(l.removeEvents(),n=d.$content,i=d.opts.animationEffect,s=f.isNumeric(t)?t:i?d.opts.animationDuration:0,d.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?f.fancybox.stop(d.$slide):i=!1,d.$slide.siblings().trigger("onReset").remove(),s&&l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",s+"ms"),l.hideLoading(d),l.hideControls(!0),l.updateCursor(),"zoom"===(i=!("zoom"!==i||n&&s&&"image"===d.type&&!l.isMoved()&&!d.hasError&&(r=l.getThumbPos(d)))?"fade":i)?(f.fancybox.stop(n),t={top:(o=f.fancybox.getTranslate(n)).top,left:o.left,scaleX:o.width/r.width,scaleY:o.height/r.height,width:r.width,height:r.height},(o="auto"==(o=d.opts.zoomOpacity)?.1<Math.abs(d.width/d.height-r.width/r.height):o)&&(r.opacity=0),f.fancybox.setTranslate(n,t),u(n),f.fancybox.animate(n,r,s,a)):i&&s?f.fancybox.animate(d.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,s,a):!0===e?setTimeout(a,s):a(),!0))},cleanUp:function(e){var t,a=this,i=a.current.opts.$orig;a.current.$slide.trigger("onReset"),a.$refs.container.empty().remove(),a.trigger("afterClose",e),a.current.opts.backFocus&&(i=i&&i.length&&i.is(":visible")?i:a.$trigger)&&i.length&&(t=l.scrollX,e=l.scrollY,i.trigger("focus"),f("html, body").scrollTop(e).scrollLeft(t)),a.current=null,(a=f.fancybox.getInstance())?a.activate():(f("body").removeClass("fancybox-active compensate-for-scrollbar"),f("#fancybox-style-noscroll").remove())},trigger:function(e,t){var a,i=Array.prototype.slice.call(arguments,1),s=this,t=t&&t.opts?t:s.current;if(t?i.unshift(t):t=s,i.unshift(s),!1===(a=f.isFunction(t.opts[e])?t.opts[e].apply(t,i):a))return a;("afterClose"!==e&&s.$refs?s.$refs.container:n).trigger(e+".fb",i)},updateControls:function(){var e=this,t=e.current,a=t.index,i=e.$refs.container,s=e.$refs.caption,n=t.opts.caption;t.$slide.trigger("refresh"),e.$caption=n&&n.length?s.html(n):null,e.hasHiddenControls||e.isIdle||e.showControls(),i.find("[data-fancybox-count]").html(e.group.length),i.find("[data-fancybox-index]").html(a+1),i.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&a<=0),i.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&a>=e.group.length-1),"image"===t.type?i.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&i.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),f(o.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=(e.current||e).opts,a=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,a.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),f.fancybox={version:"3.5.2",defaults:e,getInstance:function(e){var t=f('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),a=Array.prototype.slice.call(arguments,1);return t instanceof i&&("string"===f.type(e)?t[e].apply(t,a):"function"===f.type(e)&&e.apply(t,a),t)},open:function(e,t,a){return new i(e,t,a)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),n.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(e=o.createElement("div"),l.getComputedStyle&&l.getComputedStyle(e)&&l.getComputedStyle(e).getPropertyValue("transform")&&!(o.documentMode&&o.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var a="",i={};if(e&&t)return t.left===m&&t.top===m||(a=(t.left===m?e.position():t).left+"px, "+(t.top===m?e.position():t).top+"px",a=this.use3d?"translate3d("+a+", 0px)":"translate("+a+")"),t.scaleX!==m&&t.scaleY!==m?a+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==m&&(a+=" scaleX("+t.scaleX+")"),a.length&&(i.transform=a),t.opacity!==m&&(i.opacity=t.opacity),t.width!==m&&(i.width=t.width),t.height!==m&&(i.height=t.height),e.css(i)},animate:function(t,a,i,s,n){var o,r=this;f.isFunction(i)&&(s=i,i=null),r.stop(t),o=r.getTranslate(t),t.on(d,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(r.stop(t),f.isNumeric(i)&&t.css("transition-duration",""),f.isPlainObject(a)?a.scaleX!==m&&a.scaleY!==m&&r.setTranslate(t,{top:a.top,left:a.left,width:o.width*a.scaleX,height:o.height*a.scaleY,scaleX:1,scaleY:1}):!0!==n&&t.removeClass(a),f.isFunction(s)&&s(e))}),f.isNumeric(i)&&t.css("transition-duration",i+"ms"),f.isPlainObject(a)?(a.scaleX!==m&&a.scaleY!==m&&(delete a.width,delete a.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),f.fancybox.setTranslate(t,a)):t.addClass(a),t.data("timer",setTimeout(function(){t.trigger(d)},i+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(d),e.off(d).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},f.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?f("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},v):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},v),this},n.on("click.fb-start","[data-fancybox]",v),n.on("click.fb-start","[data-fancybox-trigger]",function(e){f('[data-fancybox="'+f(this).attr("data-fancybox-trigger")+'"]').eq(f(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:f(this)})}),a=".fancybox-button",h="fancybox-focus",g=null,n.on("mousedown mouseup focus blur",a,function(e){switch(e.type){case"mousedown":g=f(this);break;case"mouseup":g=null;break;case"focusin":f(a).removeClass(h),f(this).is(g)||f(this).is("[disabled]")||f(this).addClass(h);break;case"focusout":f(a).removeClass(h)}})))}(window,document,jQuery),function(h){"use strict";function f(a,e,t){if(a)return"object"===h.type(t=t||"")&&(t=h.param(t,!0)),h.each(e,function(e,t){a=a.replace("$"+e,t||"")}),t.length&&(a+=(0<a.indexOf("?")?"&":"?")+t),a}var i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube-nocookie.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};h(document).on("objectNeedsType.fb",function(e,t,s){var n,o,r,l,d,c,p=s.src||"",u=!1,a=h.extend(!0,{},i,s.opts.media);h.each(a,function(e,t){if(o=p.match(t.matcher)){if(u=t.type,c=e,d={},t.paramPlace&&o[t.paramPlace]){l=(l="?"==(l=o[t.paramPlace])[0]?l.substring(1):l).split("&");for(var a=0;a<l.length;++a){var i=l[a].split("=",2);2==i.length&&(d[i[0]]=decodeURIComponent(i[1].replace(/\+/g," ")))}}return r=h.extend(!0,{},t.params,s.opts[e],d),p="function"===h.type(t.url)?t.url.call(this,o,r,s):f(t.url,o,r),n="function"===h.type(t.thumb)?t.thumb.call(this,o,r,s):f(t.thumb,o),"youtube"===e?p=p.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,a,i){return"&start="+((a?60*parseInt(a,10):0)+parseInt(i,10))}):"vimeo"===e&&(p=p.replace("&%23","#")),!1}}),u?(s.opts.thumb||s.opts.$thumb&&s.opts.$thumb.length||(s.opts.thumb=n),"iframe"===u&&(s.opts=h.extend(!0,s.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),h.extend(s,{type:u,src:p,origSrc:s.src,contentSource:c,contentType:"image"===u?"image":"gmap_place"==c||"gmap_search"==c?"map":"video"})):p&&(s.type=s.opts.defaultType)});var s={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,a=this;this[e].loaded?setTimeout(function(){a.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){a[e].loaded=!0,a.done(e)}:t.onload=function(){a[e].loaded=!0,a.done(e)},document.body.appendChild(t))},done:function(e){var t,a;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=h.fancybox.getInstance())&&(a=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(a.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(a).on("ended",function(){t.next()}))}};h(document).on({"afterShow.fb":function(e,t,a){1<t.group.length&&("youtube"===a.contentSource||"vimeo"===a.contentSource)&&s.load(a.contentSource)}})}(jQuery),function(c,l,p){"use strict";function u(e){var t,a=[];for(t in e=(e=e.originalEvent||e||c.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[t].pageX?a.push({x:e[t].pageX,y:e[t].pageY}):e[t].clientX&&a.push({x:e[t].clientX,y:e[t].clientY});return a}function h(e,t,a){return t&&e?"x"===a?e.x-t.x:"y"===a?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function d(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||p.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,a=e[0].attributes,i=a.length;t<i;t++)if("data-fancybox-"===a[t].nodeName.substr(0,14))return 1}function f(e){for(var t,a,i,s=!1;;){if(t=e.get(0),a=i=a=void 0,a=c.getComputedStyle(t)["overflow-y"],i=c.getComputedStyle(t)["overflow-x"],a=("scroll"===a||"auto"===a)&&t.scrollHeight>t.clientHeight,t=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth,s=a||t)break;if(!(e=e.parent()).length||e.hasClass("fancybox-stage")||e.is("body"))break}return s}function a(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",p.proxy(t,"ontouchstart"))}var m=c.requestAnimationFrame||c.webkitRequestAnimationFrame||c.mozRequestAnimationFrame||c.oRequestAnimationFrame||function(e){return c.setTimeout(e,1e3/60)},g=c.cancelAnimationFrame||c.webkitCancelAnimationFrame||c.mozCancelAnimationFrame||c.oCancelAnimationFrame||function(e){c.clearTimeout(e)};a.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),p(l).off(".fb.touch"),e.requestId&&(g(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},a.prototype.ontouchstart=function(e){var t=this,a=p(e.target),i=t.instance,s=i.current,n=s.$slide,o=s.$content,r="touchstart"==e.type;if(r&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&n.length&&a.length&&!d(a)&&!d(a.parent())&&(a.is("img")||!(e.originalEvent.clientX>a[0].clientWidth+a.offset().left))){if(!s||i.isAnimating||s.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=u(e),t.startPoints.length&&(s.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=a,t.$content=o,t.opts=s.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=i.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(n[0].clientWidth),t.canvasHeight=Math.round(n[0].clientHeight),t.contentLastPos=null,t.contentStartPos=p.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=p.fancybox.getTranslate(n),t.stagePos=p.fancybox.getTranslate(i.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,p(l).off(".fb.touch").on(r?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",p.proxy(t,"ontouchend")).on(r?"touchmove.fb.touch":"mousemove.fb.touch",p.proxy(t,"ontouchmove")),p.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(a.is(t.$stage)||t.$stage.find(a).length)||(a.is(".fancybox-image")&&e.preventDefault(),p.fancybox.isMobile&&a.hasClass("fancybox-caption")))&&(t.isScrollable=f(a)||f(a.parent()),p.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!s.hasError||(t.canPan?(p.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===s.type&&(s.isLoaded||s.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,p.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-p(c).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-p(c).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=h(t.startPoints[0],t.startPoints[1]))))}},a.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},a.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=u(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=h(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=h(t.newPoints[0],t.startPoints[0],"y"),t.distance=h(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},a.prototype.onSwipe=function(e){var s=this,n=s.instance,t=s.isSwiping,a=s.sliderStartPos.left||0;if(!0!==t)"x"==t&&(0<s.distanceX&&(s.instance.group.length<2||0===s.instance.current.index&&!s.instance.current.opts.loop)?a+=Math.pow(s.distanceX,.8):s.distanceX<0&&(s.instance.group.length<2||s.instance.current.index===s.instance.group.length-1&&!s.instance.current.opts.loop)?a-=Math.pow(-s.distanceX,.8):a+=s.distanceX),s.sliderLastPos={top:"x"==t?0:s.sliderStartPos.top+s.distanceY,left:a},s.requestId&&(g(s.requestId),s.requestId=null),s.requestId=m(function(){s.sliderLastPos&&(p.each(s.instance.slides,function(e,t){var a=t.pos-s.instance.currPos;p.fancybox.setTranslate(t.$slide,{top:s.sliderLastPos.top,left:s.sliderLastPos.left+a*s.canvasWidth+a*t.opts.gutter})}),s.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(s.distance)){if(s.canTap=!1,n.group.length<2&&s.opts.vertical?s.isSwiping="y":n.isDragging||!1===s.opts.vertical||"auto"===s.opts.vertical&&800<p(c).width()?s.isSwiping="x":(a=Math.abs(180*Math.atan2(s.distanceY,s.distanceX)/Math.PI),s.isSwiping=45<a&&a<135?"y":"x"),"y"===s.isSwiping&&p.fancybox.isMobile&&s.isScrollable)return void(s.isScrolling=!0);n.isDragging=s.isSwiping,s.startPoints=s.newPoints,p.each(n.slides,function(e,t){var a,i;p.fancybox.stop(t.$slide),a=p.fancybox.getTranslate(t.$slide),i=p.fancybox.getTranslate(n.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===n.current.pos&&(s.sliderStartPos.top=a.top-i.top,s.sliderStartPos.left=a.left-i.left),p.fancybox.setTranslate(t.$slide,{top:a.top-i.top,left:a.left-i.left})}),n.SlideShow&&n.SlideShow.isActive&&n.SlideShow.stop()}},a.prototype.onPan=function(){var e=this;h(e.newPoints[0],e.realPoints[0])<(p.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&g(e.requestId),e.requestId=m(function(){p.fancybox.setTranslate(e.$content,e.contentLastPos)}))},a.prototype.limitMovement=function(){var e=this,t=e.canvasWidth,a=e.canvasHeight,i=e.distanceX,s=e.distanceY,n=e.contentStartPos,o=n.left,r=n.top,l=n.width,d=n.height,c=t<l?o+i:o,p=r+s,e=Math.max(0,.5*t-.5*l),n=Math.max(0,.5*a-.5*d),l=Math.min(t-l,.5*t-.5*l),d=Math.min(a-d,.5*a-.5*d);return 0<i&&e<c&&(c=e-1+Math.pow(-e+o+i,.8)||0),i<0&&c<l&&(c=l+1-Math.pow(l-o-i,.8)||0),0<s&&n<p&&(p=n-1+Math.pow(-n+r+s,.8)||0),{top:p=s<0&&p<d?d+1-Math.pow(d-r-s,.8)||0:p,left:c}},a.prototype.limitPosition=function(e,t,a,i){var s=this.canvasWidth,n=this.canvasHeight;return e=s<a?(e=0<e?0:e)<s-a?s-a:e:Math.max(0,s/2-a/2),{top:t=n<i?(t=0<t?0:t)<n-i?n-i:t:Math.max(0,n/2-i/2),left:e}},a.prototype.onZoom=function(){var e=this,t=e.contentStartPos,a=t.width,i=t.height,s=t.left,n=t.top,o=h(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,r=Math.floor(a*o),l=Math.floor(i*o),d=(a-r)*e.percentageOfImageAtPinchPointX,t=(i-l)*e.percentageOfImageAtPinchPointY,a=(e.newPoints[0].x+e.newPoints[1].x)/2-p(c).scrollLeft(),i=(e.newPoints[0].y+e.newPoints[1].y)/2-p(c).scrollTop(),a=a-e.centerPointStartX,o={top:n+(t+(i-e.centerPointStartY)),left:s+(d+a),scaleX:o,scaleY:o};e.canTap=!1,e.newWidth=r,e.newHeight=l,e.contentLastPos=o,e.requestId&&g(e.requestId),e.requestId=m(function(){p.fancybox.setTranslate(e.$content,e.contentLastPos)})},a.prototype.ontouchend=function(e){var t=this,a=t.isSwiping,i=t.isPanning,s=t.isZooming,n=t.isScrolling;if(t.endPoints=u(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),p(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(g(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,i?t.endPanning():s?t.endZooming():t.endSwiping(a,n)},a.prototype.endSwiping=function(e,t){var a=this,i=!1,s=a.instance.group.length,n=Math.abs(a.distanceX),n="x"==e&&1<s&&(130<a.dMs&&10<n||50<n);a.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(a.distanceY)?(p.fancybox.animate(a.instance.current.$slide,{top:a.sliderStartPos.top+a.distanceY+150*a.velocityY,opacity:0},200),i=a.instance.close(!0,250)):n&&0<a.distanceX?i=a.instance.previous(300):n&&a.distanceX<0&&(i=a.instance.next(300)),!1!==i||"x"!=e&&"y"!=e||a.instance.centerSlide(200),a.$container.removeClass("fancybox-is-sliding")},a.prototype.endPanning=function(){var e,t,a=this;a.contentLastPos&&(t=!1===a.opts.momentum||350<a.dMs?(e=a.contentLastPos.left,a.contentLastPos.top):(e=a.contentLastPos.left+500*a.velocityX,a.contentLastPos.top+500*a.velocityY),(t=a.limitPosition(e,t,a.contentStartPos.width,a.contentStartPos.height)).width=a.contentStartPos.width,t.height=a.contentStartPos.height,p.fancybox.animate(a.$content,t,330))},a.prototype.endZooming=function(){var e,t,a=this,i=a.instance.current,s=a.newWidth,n=a.newHeight;a.contentLastPos&&(e=a.contentLastPos.left,t=a.contentLastPos.top,p.fancybox.setTranslate(a.$content,{top:t,left:e,width:s,height:n,scaleX:1,scaleY:1}),s<a.canvasWidth&&n<a.canvasHeight?a.instance.scaleToFit(150):s>i.width||n>i.height?a.instance.scaleToActual(a.centerPointStartX,a.centerPointStartY,150):(n=a.limitPosition(e,t,s,n),p.fancybox.animate(a.$content,n,150)))},a.prototype.onTap=function(t){function e(e){if(e=o.opts[e],e=p.isFunction(e)?e.apply(n,[o,t]):e)switch(e){case"close":n.close(i.startEvent);break;case"toggleControls":n.toggleControls();break;case"next":n.next();break;case"nextOrClose":1<n.group.length?n.next():n.close(i.startEvent);break;case"zoom":"image"==o.type&&(o.isLoaded||o.$ghost)&&(n.canPan()?n.scaleToFit():n.isScaledDown()?n.scaleToActual(l,d):n.group.length<2&&n.close(i.startEvent))}}var a,i=this,s=p(t.target),n=i.instance,o=n.current,r=t&&u(t)||i.startPoints,l=r[0]?r[0].x-p(c).scrollLeft()-i.stagePos.left:0,d=r[0]?r[0].y-p(c).scrollTop()-i.stagePos.top:0;if((!t.originalEvent||2!=t.originalEvent.button)&&(s.is("img")||!(l>s[0].clientWidth+s.offset().left))){if(s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))a="Outside";else if(s.is(".fancybox-slide"))a="Slide";else{if(!n.current.$content||!n.current.$content.find(s).addBack().filter(s).length)return;a="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,50<Math.abs(l-i.tapX)||50<Math.abs(d-i.tapY))return this;e("dblclick"+a)}else i.tapX=l,i.tapY=d,o.opts["dblclick"+a]&&o.opts["dblclick"+a]!==o.opts["click"+a]?i.tapped=setTimeout(function(){i.tapped=null,n.isAnimating||e("click"+a)},500):e("click"+a);return this}},p(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new a(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(n,o){"use strict";o.extend(!0,o.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function a(e){this.instance=e,this.init()}o.extend(a.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,a=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!a?e.$button.hide():a.progress&&(e.$progress=o('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,a=t.instance,i=a.current;i&&(!0===e||i.opts.loop||a.currIndex<a.group.length-1)?t.isActive&&"video"!==i.contentType&&(t.$progress&&o.fancybox.animate(t.$progress.show(),{scaleX:1},i.opts.slideShow.speed),t.timer=setTimeout(function(){a.current.opts.loop||a.current.index!=a.group.length-1?a.next():a.jumpTo(0)},i.opts.slideShow.speed)):(t.stop(),a.idleSecondsCounter=0,a.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),o(n).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new a(t))},"beforeShow.fb":function(e,t,a,i){t=t&&t.SlideShow;i?t&&a.opts.slideShow.autoStart&&t.start():t&&t.isActive&&t.clear()},"afterShow.fb":function(e,t,a){t=t&&t.SlideShow;t&&t.isActive&&t.set()},"afterKeydown.fb":function(e,t,a,i,s){t=t&&t.SlideShow;!t||!a.opts.slideShow||80!==s&&32!==s||o(n.activeElement).is("button,a,input")||(i.preventDefault(),t.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){t=t&&t.SlideShow;t&&t.stop()}}),o(n).on("visibilitychange",function(){var e=o.fancybox.getInstance(),e=e&&e.SlideShow;e&&e.isActive&&(n.hidden?e.clear():e.set())})}(document,jQuery),function(n,a){"use strict";var i,s=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},a=0;a<e.length;a++){var i=e[a];if(i&&i[1]in n){for(var s=0;s<i.length;s++)t[e[0][s]]=i[s];return t}}return!1}();s&&(a.extend(!0,a.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!(i={request:function(e){(e=e||n.documentElement)[s.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){n[s.exitFullscreen]()},toggle:function(e){e=e||n.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(n[s.fullscreenElement])},enabled:function(){return Boolean(n[s.fullscreenEnabled])}})}}),a(n).on(s.fullscreenchange,function(){var e=i.isFullscreen(),t=a.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.current.$content.css("transition","none"),t.isAnimating=!1,t.update(!0,!0,0)),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})),a(n).on({"onInit.fb":function(e,t){s?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,a,i,s){t&&t.FullScreen&&70===s&&(i.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(e,n){"use strict";var o="fancybox-thumbs",r=o+"-active";n.fancybox.defaults=n.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},n.fancybox.defaults);function i(e){this.init(e)}n.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,a=e.group,i=0;t.instance=e,t.opts=a[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var s=0,n=a.length;s<n&&(a[s].thumb&&i++,!(1<i));s++);1<i&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var a,e=this,t=e.instance,i=e.opts.parentEl,s=[];e.$grid||(e.$grid=n('<div class="'+o+" "+o+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(i).addBack().filter(i)),e.$grid.on("click","a",function(){t.jumpTo(n(this).attr("data-index"))})),e.$list||(e.$list=n('<div class="'+o+'__list">').appendTo(e.$grid)),n.each(t.group,function(e,t){(a=t.thumb)||"image"!==t.type||(a=t.src),s.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(a&&a.length?' style="background-image:url('+a+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=s.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,a,i=this,s=i.$list,n=i.$grid;i.instance.current&&(a=(t=s.children().removeClass(r).filter('[data-index="'+i.instance.current.index+'"]').addClass(r)).position(),"y"===i.opts.axis&&(a.top<0||a.top>s.height()-t.outerHeight())?s.stop().animate({scrollTop:s.scrollTop()+a.top},e):"x"===i.opts.axis&&(a.left<n.scrollLeft()||a.left>n.scrollLeft()+(n.width()-t.outerWidth()))&&s.parent().stop().animate({scrollLeft:a.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),n(e).on({"onInit.fb":function(e,t){var a;t&&!t.Thumbs&&(a=new i(t)).isActive&&!0===a.opts.autoStart&&a.show()},"beforeShow.fb":function(e,t,a,i){t=t&&t.Thumbs;t&&t.isVisible&&t.focus(i?0:250)},"afterKeydown.fb":function(e,t,a,i,s){t=t&&t.Thumbs;t&&t.isActive&&71===s&&(i.preventDefault(),t.toggle())},"beforeClose.fb":function(e,t){t=t&&t.Thumbs;t&&t.isVisible&&!1!==t.opts.hideOnClose&&t.$grid.hide()}})}(document,jQuery),function(e,s){"use strict";s.extend(!0,s.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),s(e).on("click","[data-fancybox-share]",function(){var e,t,a=s.fancybox.getInstance(),i=a.current||null;i&&("function"===s.type(i.opts.share.url)&&(e=i.opts.share.url.apply(i,[a,i])),e=i.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===i.type?encodeURIComponent(i.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return t[e]}))).replace(/\{\{descr\}\}/g,a.$caption?encodeURIComponent(a.$caption.text()):""),s.fancybox.open({src:a.translate(a,e),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){a.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(n,o,i){"use strict";function s(){var e=n.location.hash.substr(1),t=e.split("-"),a=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:a<1?1:a,gallery:t.join("-")}}function t(e){""!==e.gallery&&i("[data-fancybox='"+i.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function r(e){return!!e&&(""!==(e=(e=(e.current||e).opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&e)}i.escapeSelector||(i.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),i(function(){!1!==i.fancybox.defaults.hash&&(i(o).on({"onInit.fb":function(e,t){var a,i;!1!==t.group[t.currIndex].opts.hash&&(a=s(),(i=r(t))&&a.gallery&&i==a.gallery&&(t.currIndex=a.index-1))},"beforeShow.fb":function(e,t,a,i){var s;a&&!1!==a.opts.hash&&(s=r(t))&&(t.currentHash=s+(1<t.group.length?"-"+(a.index+1):""),n.location.hash!=="#"+t.currentHash&&(i&&!t.origHash&&(t.origHash=n.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in n.history?(n.history[i?"pushState":"replaceState"]({},o.title,n.location.pathname+n.location.search+"#"+t.currentHash),i&&(t.hasCreatedHistory=!0)):n.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,a){!1!==a.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?n.history.back():t.currentHash&&("replaceState"in n.history?n.history.replaceState({},o.title,n.location.pathname+n.location.search+(t.origHash||"")):n.location.hash=t.origHash),t.currentHash=null)}}),i(n).on("hashchange.fb",function(){var e=s(),a=null;i.each(i(".fancybox-container").get().reverse(),function(e,t){t=i(t).data("FancyBox");if(t&&t.currentHash)return a=t,!1}),a?a.currentHash===e.gallery+"-"+e.index||1===e.index&&a.currentHash==e.gallery||(a.currentHash=null,a.close()):""!==e.gallery&&t(e)}),setTimeout(function(){i.fancybox.getInstance()||t(s())},50))})}(window,document,jQuery),function(e,t){"use strict";var s=(new Date).getTime();t(e).on({"onInit.fb":function(e,i,t){i.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=i.current,a=(new Date).getTime();i.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,a-s<250||(s=a,i[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
